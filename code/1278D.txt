// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                A[i][1]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[][]){
        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });
        int nums[]=new int[A.length];
        for(int i=0;i<nums.length;i++){
            nums[i]=i;
        }


        int cnt=0;
        TreeMap<Integer,Integer>tree=new TreeMap<>();
        for(int i=0;i<A.length;i++){

            List<Integer>keys=new ArrayList<>();
            for(Integer key:tree.keySet()){
                if(key>A[i][0])break;
                keys.add(key);
            }

            for(Integer key:keys){
                tree.remove(key);
            }

            for(Integer key:tree.keySet()){
                if(key>A[i][1])break;
                int j=tree.get(key);
                int r1=find(nums,i);
                int r2=find(nums,j);
                if(r1==r2){
                    out.println("NO");
                    return;
                }
                else{
                    cnt++;
                    nums[r1]=nums[r2];
                }
                if(cnt>=A.length){
                    out.println("NO");
                    return;
                }
            }


            tree.put(A[i][1],i);
        }




        Set<Integer>set=new HashSet<>();
        for(int i=0;i<A.length;i++){
            int r=find(nums,i);
            set.add(r);
            if(set.size()>1){
                out.println("NO");
                return;
            }
        }
        out.println("YES");
    }

    public int find(int nums[],int x){
        if(nums[x]==x)return x;
        int root=find(nums,nums[x]);
        nums[x]=root;
        return root;
    }

}


/*
6
1 3
2 11
4 8
5 7
6 10
9 12
* */
