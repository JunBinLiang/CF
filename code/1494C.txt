// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;








// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {


        PrintWriter out = new PrintWriter(System.out);
        int T=Int();
        for(int t=0;t<T;t++){

            int n=Int();int m=Int();
            int A[]=new int[n];
            int B[]=new int[m];

            for(int i=0;i<n;i++){
                A[i]=Int();
            }
            for(int i=0;i<m;i++){
                B[i]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A,B);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[],int B[]){
        int mx1=0,mx2=0;int n=A.length;
        int j=A.length;
        TreeMap<Integer,Integer>tree=new TreeMap<>();

        TreeMap<Integer,Integer>tree1=new TreeMap<>();
        TreeMap<Integer,Integer>tree2=new TreeMap<>();

        Set<Integer>set=new HashSet<>();
        int right[]=new int[n];
        int left[]=new int[n];

        for(int i:B)set.add(i);


        for(int i=0;i<n;i++){//left
            if(set.contains(A[i]))left[i]++;
            if(i-1>=0)left[i]+=left[i-1];
            tree.put(A[i],i);
        }
        for(int i=n-1;i>=0;i--){//right
            if(set.contains(A[i]))right[i]++;
            if(i+1<A.length)right[i]+=right[i+1];
            if(A[i]>=0)j=i;
        }

        for(int i=0;i<B.length;i++){
            if(B[i]>=0)tree1.put(B[i],i);
            else tree2.put(B[i],i);
        }


        for(int i=0;i<B.length;i++){
            if(B[i]<0)continue;
            Integer floor=tree.floorKey(B[i]);
            if(floor==null||floor<0)continue;

            int index1=tree.get(floor);

            int chain=index1-j+1;
            int index2=tree1.ceilingKey(B[i]-chain+1);
            index2=tree1.get(index2);


            mx1=Math.max(mx1,i-index2+1+get(right,index1+1));

        }


        for(int i=B.length-1;i>=0;i--){
            if(B[i]>=0)continue;
            Integer ceil=tree.ceilingKey(B[i]);
            if(ceil==null||ceil>=0)continue;

            int index1=tree.get(ceil);
            int chain=(j-1)-index1+1;
            int index2=tree2.floorKey(B[i]+chain-1);
            index2=tree2.get(index2);


            mx2=Math.max(mx2,index2-i+1+get(left,index1-1));
        }


        out.println(mx1+mx2);
    }

    public int get(int A[],int i){
        if(i<0||i>=A.length)return 0;
        return A[i];
    }
}



