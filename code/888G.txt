// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int  n=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    public Solution(PrintWriter out){
        this.out=out;
    }



    /*
    //brute force Boruvka's algorithm

    public void solution(int A[]){
        int n=A.length;
        int nums[]=new int[n];
        int rank[]=new int[n];
        Arrays.sort(A);
        for(int i=0;i<A.length;i++){
            insert(trie,A[i],DEP);
        }

        for(int i=0;i<A.length;i++){
            int j=i;
            while(j<A.length&&A[j]==A[i]){
                nums[j]=i;
                rank[i]++;
                j++;
            }
            map.put(A[i],i);
            i=j-1;
        }

        long res=0;
        while(true){
            Map<Integer,List<Integer>>f=new HashMap<>();
            for(int i=0;i<n;i++){
                int r=find(nums,i);
                if(!f.containsKey(r))f.put(r,new ArrayList<>());
                f.get(r).add(A[i]);
            }
            if(f.size()==1)break;


            for(Integer key:f.keySet()){
                List<Integer>list=f.get(key);
                for(int i:list)dec(trie,i,DEP);//remove
                int mn=Integer.MAX_VALUE;
                int v1=-1,v2=-1;
                for(int i:list){
                    x=0;
                    get(trie,i,DEP);
                    int xor=x^i;
                    if(xor<mn){
                        mn=xor;
                        v1=i;
                        v2=x;
                    }
                }
                int r1=find(nums,map.get(v1));
                int r2=find(nums,map.get(v2));
                if(r1!=r2){
                    if(rank[r1]<rank[r2]){
                        nums[r1]=r2;
                    }
                    else if(rank[r2]<rank[r2]){
                        nums[r2]=r1;
                        rank[r1]++;
                    }
                    else{
                        nums[r2]=r1;
                        rank[r1]++;
                    }
                    res+=mn;
                }
                for(int i:list)add(trie,i,DEP);//add back
            }
        }
        out.println(res);
    }*/


    //Optimizaed Boruvka's algorithm based on Trie+xor property
    Trie trie[]=new Trie[2];
    int x=0;
    int DEP=30;
    long res=0;
    int A[];
    public void solution(int A[]){
        this.A=A;
        Arrays.sort(A);
        for(int i=0;i<A.length;i++){
            insert(trie,A[i],DEP,i);
        }
        Trie root=new Trie();
        root.childs=trie;
        dfs(root,DEP);
        out.println(res);
    }

    class Trie{
        Trie childs[]=new Trie[2];
        int cnt=0;
        int l,r;
    }

    public int find(int nums[],int x){
        if(nums[x]==x)return x;
        int root=find(nums,nums[x]);
        nums[x]=root;
        return root;
    }

    public void dfs(Trie root,int dep){

        if(root.childs[0]!=null&&root.childs[1]!=null){
            int mn=Integer.MAX_VALUE;
            for(int i=root.childs[0].l;i<=root.childs[0].r;i++){
                x=0;
                query(root.childs[1].childs,A[i],dep-1);
                mn=Math.min(mn,x);
            }

            res+=mn;
            res+=(1<<(dep));

            dfs(root.childs[0],dep-1);
            dfs(root.childs[1],dep-1);

        } else if (root.childs[0] != null) {
             dfs(root.childs[0],dep-1);
        }
        else if (root.childs[1] != null){
             dfs(root.childs[1],dep-1);
        }
        else{

        }

    }

    public void insert(Trie trie[],int val,int i,int index){
        if(i<0)return;
        int bit=1;
        if((val&(1<<i))==0)bit=0;
        if(trie[bit]==null){
            trie[bit]=new Trie();
            trie[bit].l=index;
            trie[bit].r=index;
        }
        trie[bit].l=Math.min(trie[bit].l,index);
        trie[bit].r=Math.max(trie[bit].r,index);
        trie[bit].cnt++;
        insert(trie[bit].childs,val,i-1,index);
    }

    public void query(Trie trie[],int val,int i){
        if(i<0)return;
        int bit=1;
        if((val&(1<<i))==0)bit=0;

        if(bit==0){
            if(trie[bit]!=null&&trie[bit].cnt>0){
                query(trie[bit].childs,val,i-1);
            }
            else{
                x=x|(1<<i);
                query(trie[1].childs,val,i-1);
            }
        }
        else{
            if(trie[bit]!=null&&trie[bit].cnt>0){
                query(trie[bit].childs,val,i-1);
            }
            else{
                x=x|(1<<i);
                query(trie[0].childs,val,i-1);
            }
        }
    }

    public void sort(int A[]){
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        for(int i:A)pq.add(i);
        for(int i=0;i<A.length;i++)A[i]=pq.poll();
    }

}








/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

