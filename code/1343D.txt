// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int k=Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A,k);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[],int k){
        int res=Integer.MAX_VALUE;
        int line[]=new int[2*k+2];
        int l=0,r=A.length-1;
        Map<Integer,Integer>f=new HashMap<>();

        while(l<r){
            int sum=A[l]+A[r];
            if(!f.containsKey(sum))f.put(sum,1);
            else f.put(sum,f.get(sum)+1);

            int mn=Math.min(A[l],A[r]);
            int mx=Math.max(A[l],A[r]);

            line[Math.max(2,mn+1)]++;
            line[mx+k+1]--;

            l++;
            r--;
        }


        int sum=0;
        for(int i=2;i<=2*k;i++){
            sum+=line[i];
            int need=((A.length/2-sum))*2;

            int repeat=0;
            if(f.containsKey(i))repeat=f.get(i);
            res=Math.min(res,sum+need-repeat);
        }


        out.println(res);
    }
}


