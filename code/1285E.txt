// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<A.length;i++){
                for(int j=0;j<A[0].length;j++){
                    A[i][j]=Int();
                }
            }

            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    int right1[];
    public void solution(int A[][]) {
        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });

        //for(int p[]:A){
            //System.out.println(Arrays.toString(p));
        //}

        right1=new int[A.length];
        TreeMap<Integer,Integer>tree=new TreeMap<>();
        for(int i=A.length-1;i>=0;i--){
            int cur=A[i][1];

            while(true){
                Integer floor=tree.floorKey(cur);
                if(floor!=null){
                    cur=Math.max(cur,tree.get(floor));
                    tree.remove(floor);
                }
                else{
                    break;
                }
            }
            tree.put(A[i][0],cur);
            right1[i]=tree.size();
           // System.out.println(tree);
        }

        Seg seg=new Seg(0,A.length-1);
        Stack<int[]>stack=new Stack<>();
        stack.push(new int[]{A[0][0],A[0][1]});
        int res=right1[1];

       // System.out.println(Arrays.toString(right1));

        for(int i=1;i<A.length;i++){
            int l=i+1,r=A.length-1;
            int pos=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(stack.peek()[1]>=A[mid][0]){
                    pos=mid;
                    l=mid+1;
                }
                else{
                    r=mid-1;
                }
            }
            if(pos==-1){
                res=Math.max(res,stack.size()+get(right1,i+1));
            }
            else{
                res=Math.max(res,stack.size()+seg.query(i+1,pos)-1);
            }

            //if(res==2){
                //System.out.println(i+"  "+pos+"  "+stack.size());
           // }

            if(A[i][0]<=stack.peek()[1]){
                stack.peek()[1]=Math.max(stack.peek()[1],A[i][1]);
            }
            else{
                stack.push(new int[]{A[i][0],A[i][1]});
            }

        }
        out.println(res);
    }

    public int get(int A[],int i){
        if(i>=A.length)return 0;
        return A[i];
    }

    class Seg{
        int l,r;
        int min=Integer.MAX_VALUE;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.min=Math.min(left.min,right.min);
            }else{
                this.min=right1[l];
            }
        }
        public int query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return min;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.min(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                min=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.min=Math.min(left.min,right.min);
        }
    }

}


















