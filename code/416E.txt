// Don't place your source in a package

import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            int g[][]=new int[n][n];
            for(int j=0;j<g.length;j++){
                Arrays.fill(g[j],-1);
            }

            for(int i=0;i<m;i++){
                int u=Int()-1;
                int v=Int()-1;
                int w=Int();
                g[u][v]=w;
                g[v][u]=w;
            }

            Solution sol=new Solution(out);
            sol.solution(g);
        }
        out.flush();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }




    public void solution(int g[][]){
        int n=g.length;
        int dis[][]=new int[n][n];
        for(int i=0;i<dis.length;i++){
            Arrays.fill(dis[i],10000000);
        }

        //floy
        for(int i=0;i<n;i++){
            dis[i][i]=0;
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(g[i][j]!=-1){
                    dis[i][j]=g[i][j];
                }
            }
        }

        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    dis[i][j] = Math.min(dis[i][j], dis[i][k] + dis[k][j]);
                }
            }
        }

        int cnt[][]=new int[n][n];

        //enumerate all edges, to see how many edges lies on (i,j) shortest path
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                for(int k=0;k<n;k++){
                    if(g[k][j]!=-1&&g[k][j]+dis[i][k]==dis[i][j]){//edge(i k) is on the path
                        cnt[i][j]++;
                    }
                }
            }
        }




        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int ans=0;
                for(int k=0;k<n;k++){
                    if(dis[i][k]+dis[k][j]==dis[i][j]){
                        ans+=cnt[i][k];
                    }
                }
                out.print(ans+" ");
            }
        }




    }














}



/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/





