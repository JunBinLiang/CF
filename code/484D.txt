// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }


    public void solution(int A[]) {
        int n=A.length;
        if(n==1){
            out.println(0);
            return;
        }


        long dp[]=new long[A.length];
        Arrays.fill(dp,Long.MIN_VALUE);
        dp[0]=0;
        boolean inc=true;
        int a=0,b=0;
        for(int i=1;i<n;i++){
            if(A[i]==A[i-1]){
                dp[i]=dp[i-1];
                continue;
            }
            if(A[i]>A[i-1]){//in
                if(inc){
                    dp[i]=Math.max(get(dp,a-1)+A[i]-A[a],get(dp,b-1)+A[i]-A[b]);
                }
                else{
                    a = i-1;
                    b= i;
                    dp[i]=Math.max(get(dp,a-1)+A[i]-A[a],get(dp,b-1)+A[i]-A[b]);
                    inc=true;
                }
            }
            else{//de
                if(inc){
                    a = i-1;
                    b= i;
                    dp[i]=Math.max(get(dp,a-1)+A[a] - A[i],get(dp,b-1)+A[b] - A[i]);
                    inc=false;
                }
                else{
                    dp[i]=Math.max(get(dp,a-1)+A[a] - A[i],get(dp,b-1)+A[b] - A[i]);
                }
            }
        }
        out.println(dp[n-1]);
    }

    public long get(long A[],int i){
        if(i<0)return 0;
        return A[i];
    }
}













