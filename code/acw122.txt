// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int A[]) {
        int n =A.length;
        long sum = 0;
        for(int i:A){
            sum+=i;
        }
        long t = sum/n;
        long dif[]=new long[A.length];
        for(int i=0;i<dif.length;i++){
            dif[i]=t-A[i];
        }

        long pre[][]=new long[dif.length][2];
        pre[0][0]=dif[0];
        for(int i=1;i<dif.length;i++){
            pre[i][0]=dif[i]+pre[i-1][0];
            pre[i][1]=i;
        }

        Arrays.sort(pre,(a,b)->{
            return Long.compare(a[0],b[0]);
        });
        

        long res = Long.MAX_VALUE;
        int index1 =(int)(pre[n/2][1]) ;
        int index2=(int)(pre[(n-1)/2][1]);

        long sum1=0,sum2=0;
        long cur1=0,cur2=0;
        for(int i=0;i<A.length;i++){
            cur1+=dif[(index1+i+1)%n];
            cur2+=dif[(index2+i+1)%n];
            sum1+=Math.abs(cur1);
            sum2+=Math.abs(cur2);
        }

        out.println(Math.min(sum1,sum2));

    }

    public long pre(long A[],int l,int r){
        if(l==0)return A[r];
        else return A[r]-A[l-1];
    }



}
















