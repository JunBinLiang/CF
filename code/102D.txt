// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int(),m=Int();
            int A[][]=new int[m][2];
            for(int i=0;i<m;i++){
                A[i][0]=Int();
                A[i][1]=Int();
            }
            Solution sol=new Solution(out);
            sol.solution(n,A);
        }
        out.close();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }




    int mod=1000000007;
    public void solution(int n,int A[][]){
        Arrays.sort(A,(a,b)->{
            return a[1]-b[1];
        });



        long dp[]=new long[A.length];
        long pre[]=new long[A.length];
        for(int i=0;i<A.length;i++){
            long cnt=0;
            if(A[i][0]==0)cnt++;



            int l=0,r=i-1;
            int pos1=-1;int pos2=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(A[mid][1]>=A[i][0]){
                    pos1=mid;
                    r=mid-1;
                }
                else{
                    l=mid+1;
                }
            }

            l=0;r=i-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(A[mid][1]<=A[i][1]-1){
                    pos2=mid;
                    l=mid+1;
                }
                else{
                    r=mid-1;
                }
            }

            if(pos2!=-1&&pos1!=-1&&pos2>=pos1){
                cnt+=pre[pos2]-pre[pos1]+dp[pos1];
                if(cnt<0)cnt+=mod;
                cnt%=mod;
            }

            dp[i]=cnt;
            if(i>0)pre[i]+=pre[i-1];
            pre[i]+=dp[i];
            pre[i]%=mod;
        }


        long res=0;
        for(int i=0;i<A.length;i++){
            if(A[i][1]==n){
                res+=dp[i];
                res%=mod;
            }
        }

        out.println(res);

    }




}










/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/


