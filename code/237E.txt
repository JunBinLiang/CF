// Don't place your source in a package

import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);


        int T=1;
        for(int t=0;t<T;t++){
            String target=Str();
            int n=Int();
            List<Pair>list=new ArrayList<>();
            for(int i=0;i<n;i++){
                String s=Str();
                int w=Int();
                list.add(new Pair(s,w));
            }

            Solution sol=new Solution(out);
            sol.solution(target,list);
        }
        out.flush();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }




    public void solution(String target,List<Pair>list){

        int n=list.size();
        int src=n+26+2;
        int t=n+26+3;//sink
        int cap[][]=new int[n+26+5][n+26+5];
        int cost[][]=new int[n+26+5][n+26+5];

        for(int i=0;i<list.size();i++){
            Pair p=list.get(i);
            String s=p.s;
            int take=p.w;
            MinCostFlowSimple.addEdge(cap,cost,src,i,take,0);
            int cnt[]=new int[26];
            for(int j=0;j<s.length();j++){
                cnt[s.charAt(j)-'a']++;
            }

            for(int j=0;j<26;j++){
                if(cnt[j]>0){
                    MinCostFlowSimple.addEdge(cap,cost,i,n+j,cnt[j],i+1);
                }
            }
        }

        int cnt[]=new int[26];
        for(int i=0;i<target.length();i++){
            cnt[target.charAt(i)-'a']++;
        }

        for(int i=0;i<cnt.length;i++){
            if(cnt[i]>0){
                MinCostFlowSimple.addEdge(cap,cost,n+i,t,cnt[i],0);
            }
        }



        int p[] = MinCostFlowSimple.minCostFlow(cap, cost, src, t);
        if(p[1]!=target.length()){
            out.println(-1);
        }
        else{
            out.println(p[0]);
        }

    }






}


class MinCostFlowSimple {
    public static int[] minCostFlow(int[][] cap, int[][] cost, int s, int t) {
        int n = cap.length;
        int[] d = new int[n];
        int[] p = new int[n];
        for (int flow = 0, flowCost = 0;; ++flow) {
            Arrays.fill(d, Integer.MAX_VALUE);
            d[s] = 0;
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    for (int k = 0; k < n; k++)
                        if (cap[j][k] > 0 && d[j] < Integer.MAX_VALUE && d[k] > d[j] + cost[j][k]) {
                            d[k] = d[j] + cost[j][k];
                            p[k] = j;
                        }
            if (d[t] == Integer.MAX_VALUE)
                return new int[] { flowCost, flow };
            flowCost += d[t];
            for (int v = t; v != s; v = p[v]) {
                --cap[p[v]][v];
                ++cap[v][p[v]];
            }
        }
    }

    public static void addEdge(int[][] cap, int[][] cost, int u, int v, int edgeCapacity, int edgeCost) {
        cap[u][v] = edgeCapacity;
        cost[u][v] = edgeCost;
        cost[v][u] = -edgeCost;
    }

    // Usage example
    /*public static void main(String[] args) {
        int n = 3;
        int[][] capacity = new int[n][n];
        int[][] cost = new int[n][n];
        addEdge(capacity, cost, 0, 1, 3, 1);
        addEdge(capacity, cost, 0, 2, 2, 1);
        addEdge(capacity, cost, 1, 2, 2, 1);
        int[] costFlow = minCostFlow(capacity, cost, 0, 2);
        System.out.println(6 == costFlow[0]);
        System.out.println(4 == costFlow[1]);
    }*/
}


class Pair{
    String s;int w;
    public Pair(String s,int w){
        this.s=s;
        this.w=w;
    }
}

/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/





