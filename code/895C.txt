// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    long dp[][];
    long f[];
    int hash[]=new int[80];
    public void solution(int A[]) {
        //C(n,0) + C(n,2) + ... == C(n,1) + C(n,3) = C(n,5) + ... == 2^(n-1)
        int p[]=new int[71];
        int cnts[]=new int[71];
        List<Integer>primes=new ArrayList<>();
        for(int i=2;i<p.length;i++){
            if(p[i]!=0)continue;
            primes.add(i);
            for(int j=i;j<p.length;j+=i){
                p[j]=1;
            }
        }

        for(int i : A){
            cnts[i]++;
        }


        for(int i=2;i<=70;i++){
            int bits=0;
            int cur=i;
            for(int j=0;j<primes.size();j++){
                int prime=primes.get(j);
                int cnt=0;
                while(cur!=1&&cur%prime==0){
                    cnt++;
                    cur/=prime;
                }
                if(cnt%2==1){
                    bits=bits|(1<<j);
                }
            }
            hash[i]=bits;
        }


        f=new long[A.length+1];
        f[0]=1;
        for(int i=1;i<f.length;i++){
            f[i]=2*f[i-1];
            f[i]%=MOD;
        }

        /*dp=new long[(1<<primes.size())][72];
        System.out.println(dp.length);
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }*/

        long dp[]=new long[1<<(primes.size())];
        dp[0]=1;

        for(int i=2;i<cnts.length;i++){
            if(cnts[i]==0)continue;
            int cnt=cnts[i];
            long even=f[cnt-1];
            long odd=f[cnt-1];
            long newdp[]=new long[dp.length];
            for(int state=0;state<dp.length;state++){
                if(dp[state]==0)continue;
                int newstate=merge(hash[i],state);
                newdp[newstate]+=(dp[state]*odd);
                newdp[newstate]%=MOD;
                newdp[state]+=dp[state]*even;
                newdp[state]%=MOD;
            }
            dp=newdp;
        }





        long a = f[cnts[1]];
        a=(a-1+MOD)%MOD;

        if(cnts[1]==A.length){
            out.println(a);
            return;
        }
        long res=dp[0];
        res--;
        res*=f[cnts[1]];
        res%=MOD;
        res+=a;
        res%=MOD;
        out.println(res);
    }


    public int merge(int a,int b){
        int res=0;
        for(int i=0;i<22;i++){
            int b1=0,b2=0;
            if((a&(1<<i))!=0)b1=1;
            if((b&(1<<i))!=0)b2=1;
            if((b1+b2)%2==1){
                res=res|(1<<i);
            }
        }
        return res;
    }


}


















