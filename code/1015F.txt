// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            String s=Str();

            Solution sol=new Solution(out);
            sol.solution(n,s);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }


    String s;
    int N;
    int dp[][][][];
    int p[][];
    public void solution(int n,String s){
        this.s=s;
        this.N=n;
        dp=new int[2*n][s.length()+1][n+1][2];
        p=new int[s.length()][2];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                for(int k=0;k<dp[0][0].length;k++){
                    Arrays.fill(dp[i][j][k],-1);
                }
            }
        }

        StringBuilder str=new StringBuilder();
        for(int i=0;i<s.length();i++){
            str.append(s.charAt(i));
            int pre1[]=kmpPre(str.toString()+"(");
            int pre2[]=kmpPre(str.toString()+")");
            p[i][0]=pre1[pre1.length-1];
            p[i][1]=pre2[pre2.length-1];
        }

        long res=dfs(0,0,0,0);
        out.println(res);

    }

    public int dfs(int i,int j,int open,int finish){
        if(open<0)return 0;
        if(i>=2*N){
            if(finish==1&&open==0)return 1;
            else return 0;
        }
        if(open>=N+1)return 0;

        if(dp[i][j][open][finish]!=-1)return dp[i][j][open][finish];

        int res=0;
        if(finish==1){
            res+=dfs(i+1,0,open+1,finish);
            res%=MOD;
            res+=dfs(i+1,0,open-1,finish);
            res%=MOD;
        }
        else{
            char c=s.charAt(j);
            if(c=='('){
                if(j==s.length()-1){
                    res+=dfs(i+1,0,open+1,1);
                }
                else{
                    res+=dfs(i+1,j+1,open+1,finish);
                }
                res%=MOD;
                if(j==0)res+=dfs(i+1,0,open-1,finish);
                else res+=dfs(i+1,p[j-1][1],open-1,finish);
                res%=MOD;
            }
            else{
                if(j==s.length()-1){
                    res+=dfs(i+1,0,open-1,1);
                }
                else{
                    res+=dfs(i+1,j+1,open-1,finish);
                }
                res%=MOD;
                if(j==0)res+=dfs(i+1,0,open+1,finish);
                else res+=dfs(i+1,p[j-1][0],open+1,finish);
                res%=MOD;
            }
        }
        dp[i][j][open][finish]=res;
        return res;
    }

    public int[] kmpPre(String p){
        int pre[]=new int[p.length()];
        int l=0,r=1;
        while(r<p.length()){
            if(p.charAt(l)==p.charAt(r)){
                pre[r]=l+1;
                l++;r++;
            }else{
                if(l==0)r++;
                else l=pre[l-1];
            }
        }
        return pre;
    }


}




