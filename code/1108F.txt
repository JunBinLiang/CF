// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            int A[][]=new int[m][3];
            for(int i=0;i<A.length;i++){
                for(int j=0;j<A[0].length;j++){
                    A[i][j]=Int();
                }
            }
            Solution sol=new Solution(out);
            sol.solution(A,n);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int A[][],int n) {
        Arrays.sort(A,(a,b)->{
            return a[2]-b[2];
        });

        int nums[]=new int[n];
        boolean seen[]=new boolean[A.length];
        for(int i=0;i<n;i++){
            nums[i]=i;
        }

        int res =0;
        for(int i=0;i<A.length;i++){
            int j=i;
            List<Integer>list=new ArrayList<>();
            while(j<A.length&&A[j][2]==A[i][2]){
                list.add(j);
                j++;
            }

            for(int index:list){
                int u=A[index][0]-1;
                int v=A[index][1]-1;
                int r1=find(nums,u);
                int r2=find(nums,v);
                if(r1==r2){
                    seen[index]=true;
                }
            }

            for(int index:list){
                if(seen[index])continue;
                int u=A[index][0]-1;
                int v=A[index][1]-1;
                int r1=find(nums,u);
                int r2=find(nums,v);
                if(r1==r2){
                    res++;
                }
                else{
                    nums[r1]=r2;
                }
            }
            i=j-1;
        }
        out.println(res);
    }

    public int find(int nums[],int x){
        if(nums[x]==x)return x;
        int root=find(nums,nums[x]);
        nums[x]=root;
        return root;
    }


}


















