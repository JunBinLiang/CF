// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            long A[]=new long[n];
            for(int i=0;i<A.length;i++){
                A[i]=Long();
            }
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }

    public void solution(long A[]){
        TreeMap<Long,List<Integer>>tree=new TreeMap<>();
        for(int i=0;i<A.length;i++){
            if(!tree.containsKey(A[i]))tree.put(A[i],new ArrayList<>());
            tree.get(A[i]).add(i);
        }
        PriorityQueue<long[]>pq=new PriorityQueue<>((a,b)->{
            return Long.compare(a[0],b[0]);
        });

        while(tree.size()>0){
            Long first=tree.firstKey();
            List<Integer>list=tree.get(first);
            Collections.sort(list);
            tree.remove(first);
            for(int i=0;i<list.size();i+=2){
                if(i+1<list.size()){
                    int newindex=list.get(i+1);
                    long sum=first*2;
                    if(!tree.containsKey(sum))tree.put(sum,new ArrayList<>());
                    tree.get(sum).add(newindex);
                }
            }
            if(list.size()%2==1){
                int i=list.get(list.size()-1);
                pq.add(new long[]{i,first});
            }
        }

        out.println(pq.size());
        while(pq.size()>0){
            long a[]=pq.poll();
            out.print(a[1]+" ");
        }
    }


}










/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

