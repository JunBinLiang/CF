// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        int nextInt() throws IOException {
            int out = 0;
            boolean neg = false;
            while(true) {
                int get = br.read();
                if(get == -1) break;

                char a = (char)get;

                if(a == '-') neg = true;
                else if(a >= '0' && a <= '9') {
                    out *= 10;
                    out += a - '0';
                }
                else if(out != 0) break;
            }
            if(neg) out = -out;
            return out;
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            FenWick fen=new FenWick(n+2);

            for(int i=0;i<n;i++){
                int x=Int();
                fen.update(x,1);
            }

            for(int i=0;i<m;i++){
                int q=Int();
                if(q>0){
                    fen.update(q,1);
                }
                else {
                    int k = -q;
                    int l = 1, r = n;
                    int pos = -1;
                    while (l <= r) {
                        int mid = l + (r - l) / 2;
                        int sum = fen.sumRange(0, mid);
                        if (sum >= k) {
                            pos = mid;
                            r = mid - 1;
                        } else {
                            l = mid + 1;
                        }
                    }
                    if (pos != -1) {
                        fen.update(pos, -1);
                    }
                }
            }


            int sum=fen.sumRange(0,n);
            if(sum==0){
                out.println(0);
            }
            else{
                int res=-1;
                for(int i=0;i<=n;i++){
                    if(fen.sumRange(i,i)!=0){
                        res=i;
                        break;
                    }
                }
                out.println(res);
            }
        }
        out.close();

    }


    public static int Int() throws IOException{
        return fs.nextInt();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }



    public void solution(){


    }




}


class FenWick {
    int tree[];//1-index based
    int A[];
    public FenWick(int n) {
        this.A=A;
        tree=new int[n];
    }

    public void update(int i, int val) {
        i++;
        while(i<tree.length){
            tree[i]+=val;
            i+=(i&-i);
        }
    }

    public int sumRange(int i, int j) {
        return pre(j+1)-pre(i);
    }

    public int pre(int i){
        int sum=0;
        while(i>0){
            sum+=tree[i];
            i-=(i&-i);
        }
        return sum;
    }
}








/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

