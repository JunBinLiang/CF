// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            int A[][]=new int[n][2];
            int q[][]=new int[m][3];
            for(int i=0;i<A.length;i++){
                A[i][0]=Int();
                A[i][1]=i;
            }

            for(int i=0;i<q.length;i++){
                q[i][0]=Int()-1;
                q[i][1]=Int()-1;
                q[i][2]=Int();
            }

            Arrays.sort(A,(a,b)->{
               return a[0]-b[0];
            });

            Solution sol=new Solution(out);
            sol.solution(A,q);
        }
        out.close();

    }


    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;
    int mod = MOD;
    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int A[][],int q[][]) {
        int n =A.length;
        PersistentSeg segs[]=new PersistentSeg[n+1];
        segs[0]=new PersistentSeg(0,n-1,true);

        for(int i=0;i<A.length;i++){
            segs[i+1]=new PersistentSeg(0,n-1);
            PersistentSeg.update(segs[i],segs[i+1],A[i][1],A[i][0]);
        }


        for(int p[]:q){
            int left=p[0];int right=p[1];int k=p[2];

            int l=0,r= segs.length-1;
            int pos=-1;
            while(l<=r){
                int mid = l + (r-l)/2;
                PersistentSeg seg=segs[mid];
                int cnt = seg.query(left,right);
                if(cnt>=k){
                    pos=mid;
                    if(cnt==k)break;
                    r=mid-1;
                }
                else{
                    l=mid+1;
                }
            }

            out.println(segs[pos].query1(left,right));
        }
    }

    public void go(PersistentSeg root){
        if(root==null){
            return;
        }
        go(root.left);
        go(root.right);
    }

}


class PersistentSeg{
    int l,r;
    int cnt = 0;
    int max=Integer.MIN_VALUE;
    PersistentSeg left=null,right=null;
    public PersistentSeg(int l,int r,boolean init){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new PersistentSeg(l,mid,true);
            if(r>=mid+1)right=new PersistentSeg(mid+1,r,true);
        }else{

        }
    }
    public PersistentSeg(int l,int r){
        this.l=l;
        this.r=r;
    }


    public int query(int s,int e){
        if(e<0||s<0)return 0;
        if(l==s&&r==e){
            return this.cnt;
        }
        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }
        else{
            return left.query(s,mid)+right.query(mid+1,e);
        }
    }

    public int query1(int s,int e){
        if(e<0||s<0)return 0;
        if(l==s&&r==e){
            return this.max;
        }
        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query1(s,e);
        }
        else if(s>=mid+1){
            return right.query1(s,e);
        }
        else{
            return Math.max(left.query1(s,mid),right.query1(mid+1,e));
        }
    }


    public static void update(PersistentSeg pre, PersistentSeg cur, int index,int val) {
        if (cur.l == cur.r) {
            cur.cnt=1;
            cur.max=val;
            return;
        }

        int mid = cur.l + (cur.r - cur.l) / 2;
        if (index <= mid) {//update left
            cur.right = pre.right;
            cur.left = new PersistentSeg(pre.left.l, pre.left.r);
            update(pre.left, cur.left, index,val);
        } else {//update right
            cur.left = pre.left;
            cur.right = new PersistentSeg(pre.right.l, pre.right.r);
            update(pre.right, cur.right, index,val);
        }
        cur.cnt=cur.left.cnt+cur.right.cnt;
        cur.max=Math.max(cur.left.max,cur.right.max);
    }


}















