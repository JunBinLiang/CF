// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            int k=Int();
            int A[]=Arr(n);
            Solution sol=new Solution(out);
            sol.solution(A,m,k);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }


    public void solution(int A[],int m,int k){
        int l=0,r=A.length-1;
        int pos=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(A,mid,m,k)){
                pos=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        if(pos==-1){
            out.println(0);
        }
        else{
            out.println(A.length-pos);
        }

    }

    public boolean check(int A[],int mid,int m,int k){
        int sum=0;
        int cnt=0;
        for(int i=mid;i<A.length;i++){
            if(A[i]>k)return false;
            if(sum+A[i]>k){
                sum=A[i];
                cnt++;

            }
            else{
                sum+=A[i];
            }
        }
        return cnt+1<=m;
    }
}

