// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;






// Please name your class Main
public class Main {
    static Scanner in = new Scanner(System.in);
    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);

        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();int k=Int();

            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A,k);

        }
        out.flush();
    }

    public static long Long(){
        return in.nextLong();
    }
    public static int Int(){
        return in.nextInt();
    }
    public static String Str(){
        return in.next();
    }
}


class Solution{
    int mod=1000000007;
    public void solution(PrintWriter out,int A[],int k){
        Map<Integer,Integer>f=new HashMap<>();
        long res=0;
        long fact[]=new long[A.length+10];
        fact[0]=fact[1]=1;
        for(int i=2;i<fact.length;i++){
            fact[i]=fact[i-1]*i;
            fact[i]%=mod;
        }

        for(int i:A){
            if(!f.containsKey(i)){
                f.put(i,1);
            }
            else{
                f.put(i,f.get(i)+1);
            }
        }

        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            return b[1]-a[1];
        });

        for(Integer key:f.keySet()){
            pq.add(new int[]{f.get(key),key});
        }

        while(k>0){
            int top[]=pq.poll();
            if(top[0]>=k){
                res=C(fact,top[0],k);
                break;
            }
            else{
                k-=top[0];
            }
        }
        System.out.println(res);
    }

    public long C(long fact[],int i,int j){ // C(20,3)=20!/(17!*3!)
        // take   a/b     where a=20!  b=17!*3!
        if(j>i)return 1;
        if(j<=0)return 1;
        long mod=1000000007;
        long a=fact[i];
        long b=((fact[i-j]%mod)*(fact[j]%mod))%mod;
        BigInteger B= BigInteger.valueOf(b);
        long binverse=B.modInverse(BigInteger.valueOf(mod)).longValue();
        return ((a)*(binverse%mod))%mod;
    }



}
