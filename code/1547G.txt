// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            int edges[][]=new int[m][2];
            for(int i=0;i<m;i++){
                edges[i][0]=Int()-1;
                edges[i][1]=Int()-1;
            }

            Solution sol=new Solution(out);
            sol.solution(n,edges);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    List<Integer>graph[];
    int seen[];
    public void solution(int n,int edges[][]) {
        graph=new ArrayList[n];
        seen=new int[n];
        Arrays.setAll(graph,e->new ArrayList<>());
        for(int edge[]:edges){
            int u=edge[0],v=edge[1];
            graph[u].add(v);
        }

        seen[0]=1;
        Set<Integer>stack=new HashSet<>();
        stack.add(0);
        dfs(0,stack);

        for(int i:seen){
            out.print(i+" ");
        }
        out.println();
    }

    public void dfs(int root,Set<Integer>stack){
        //System.out.println((root+1)+"  "+Arrays.toString(seen));
        for(int next:graph[root]){
            if(seen[next]==0){//not seen
                seen[next]=1;
                stack.add(next);
                dfs(next,stack);
                stack.remove(next);
            }
            else{
                if(seen[next]==1){
                    if(stack.contains(next)){
                        seen[next]=-1;
                        dfs1(next,-1);
                    }
                    else{
                        seen[next]=2;
                        dfs1(next,2);
                    }
                }
                else if(seen[next]==2){
                    if(stack.contains(next)){
                        seen[next]=-1;
                        dfs1(next,-1);
                    }
                }
            }
        }

    }

    public void dfs1(int root,int color){//color infinite
        for(int next:graph[root]){
            if(seen[next]!=color){
                if(color==2){
                    if(seen[next]!=-1){
                        seen[next]=color;
                        dfs1(next,color);
                    }
                }
                else{
                    seen[next]=color;
                    dfs1(next,color);
                }

            }
        }
    }



}

















