// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            List<Integer>g[]=new ArrayList[n];
            for(int i=0;i<g.length;i++){
                g[i]=new ArrayList<>();
            }

            for(int i=0;i<m;i++){
                int u=Int()-1,v=Int()-1;
                g[u].add(v);
                g[v].add(u);
            }

            Solution sol=new Solution();
            sol.solution(out,g);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    int mod=998244353;
    int color[];
    boolean res = true;
    int cnt=0;
    List<Integer>list=new ArrayList<>();
    public void solution(PrintWriter out,List<Integer>g[]){
        //odd+odd=even
        //odd+even=odd
        //=>bipartile graph
        long ans=1;
        int n = g.length;
        color = new int[n];
        for (int i = 0; i < n; i++) {
            if (color[i] == 0) {
                list.clear();
                color[i] = 1;
                dfs(g, i, 2);

                if(list.size()==1){
                    ans*=3;ans%=mod;
                }
                else{
                    long p1=1,p2=1;
                    for(int j:list){
                        if(color[j]==1){
                            p1*=2;p1%=mod;
                        }
                        else{
                            p2*=2;p2%=mod;
                        }
                    }
                    long sum=(p1+p2)%mod;
                    ans*=sum;
                    ans%=mod;
                }
            }
        }

        if(!res){
            out.println(0);
            return;
        }

        if(n==1){
            out.println(3);
            return;
        }


        out.println(ans);
    }

    public void dfs(List<Integer> g[], int root, int state) {
        list.add(root);
        int col = 1;
        if (state == 1)
            col = 2;

        for (int next : g[root]) {
            if (color[next] == 0) {
                color[next] = state;
                dfs(g, next, col);
            } else {
                if (color[next] != state) {
                    res = false;
                }
            }
        }
    }


}




/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/



