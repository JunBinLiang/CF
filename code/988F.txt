// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int a=Int(),n=Int(),m=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();A[i][1]=Int();
            }
            int B[][]=new int[m][2];
            for(int i=0;i<m;i++){
                B[i][0]=Int();B[i][1]=Int();
            }

            Solution sol=new Solution(out);
            sol.solution(A,B,a);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    public Solution(PrintWriter out){
        this.out=out;
    }


    Map<Integer,Integer>f=new HashMap<>();
    int B[][];
    long dp[][];
    public void solution(int A[][],int B[][],int x){
        this.B=B;
        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });

        dp=new long[x+1][B.length+1];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        boolean seen[]=new boolean[x];
        for(int p[]:A){
            int l=p[0],r=p[1];
            for(int i=l;i<r;i++){
                seen[i]=true;
            }
        }

        for(int i=0;i<B.length;i++){
            if(!f.containsKey(B[i][0]))f.put(B[i][0],i);
            else {
                int old=f.get(B[i][0]);
                if(B[old][1]>B[i][1]){
                    f.put(B[i][0],i);
                }
            }
        }

        long res=dfs(seen,0,0);
        if(res>=Integer.MAX_VALUE){
            out.println(-1);
        }
        else{
            out.println(res);
        }

    }

    public long dfs(boolean seen[],int i,int j){
        if(i>=seen.length){
            return 0;
        }
        if(dp[i][j]!=-1)return dp[i][j];
        long res=Integer.MAX_VALUE;
        if(seen[i]){//rain
            if(f.containsKey(i)){
                if(j!=0)res=Math.min(res,B[j-1][1]+dfs(seen,i+1,j));
                int pos=f.get(i);
                res=Math.min(res,B[pos][1]+dfs(seen,i+1,pos+1));
            }
            else{
                if(j!=0){
                    res=Math.min(res,B[j-1][1]+dfs(seen,i+1,j));
                }
            }
        }
        else{
            //drop
            res=Math.min(res,dfs(seen,i+1,0));
            if(j!=0){
                res=Math.min(res,B[j-1][1]+dfs(seen,i+1,j));
            }

            if(f.containsKey(i)){
                int pos=f.get(i);
                res=Math.min(res,B[pos][1]+dfs(seen,i+1,pos+1));
            }
        }
        dp[i][j]=res;
        return res;
    }


}








/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

