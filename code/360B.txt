// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int k=Int();
            int A[]=Arr(n);

            Solution sol=new Solution(out);
            sol.solution(k,A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int k,int A[]) {
        if(A.length<=1){
            out.println(0);
            return;
        }

        int l=0,r=2000000000;
        int res=r;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(A,mid,k)){
                res=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        out.println(res);
    }
    public boolean check(int A[],int mid,int k){
        int dp[]=new int[A.length];
        for(int i=1;i<A.length;i++){
            int mn=Integer.MAX_VALUE;
            if(Math.abs(A[i]-A[i-1])<=mid){
                mn=dp[i-1];
            }
            mn=Math.min(mn,i);

            int cnt=2;
            for(int j=i-2;j>=0;j--){
                int dif=Math.abs(A[i]-A[j]);
                int ave = dif/cnt;
                if(dif%cnt!=0)ave++;
                if(ave<=mid){
                    mn=Math.min(mn,cnt-1+dp[j]);
                }
                cnt++;
            }
            dp[i]=mn;
            if(mn+(A.length-i-1)<=k){
                return true;
            }
        }


        return false;
    }
    public int get(int dp[],int i){
        if(i<0)return 0;
        return dp[i];
    }


}

















