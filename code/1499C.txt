// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);


        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Sol sol=new Sol();
            sol.solution(out,A);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Sol{
    public void solution(PrintWriter out,int A[]){
        long n=A.length;
        long res=A[0]*n+A[1]*n;
        int cnt1=1,cnt2=1;
        long cost1=A[0];
        long cost2=A[1];
        int mn1=A[0];
        int mn2=A[1];

        long sum1=A[0]*n;
        long sum2=A[1]*n;


        for(int i=2;i<A.length;i++){
            if(i%2==0){
                cnt1++;
                cost1+=A[i];
                mn1=Math.min(mn1,A[i]);
                sum1=cost1-mn1+(mn1)*(n-cnt1+1);
            }
            else{
                cnt2++;
                cost2+=A[i];
                mn2=Math.min(mn2,A[i]);
                sum2=cost2-mn2+(mn2)*(n-cnt2+1);
            }
            res=Math.min(res,sum1+sum2);
        }
        out.println(res);
    }
}








