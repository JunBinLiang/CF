// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int k=Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A,k);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[],int k){
        sort(A);


        long res=Long.MAX_VALUE;
        long pre[]=new long[A.length];
        pre[0]=A[0];
        for(int i=1;i<A.length;i++){
            pre[i]=pre[i-1]+A[i];
        }

        for(int i=0;i<A.length;i++){
            int j=i;
            long cnt=0;
            while(j<A.length&&A[j]==A[i]){
                j++;cnt++;
            }
            if(cnt>=k){
                out.println(0);
                return;
            }

            long sum1=0,sum2=0;
            long leftcnt=i;
            long rightcnt=A.length-j;

            long need1=0;long need2=0;
            long needcnt1=k-cnt;;long needcnt2=k-cnt;
            if(i-1>=0)need1=leftcnt*(A[i]-1)-pre[i-1];
            if(i+1<A.length)need2=(pre[A.length-1]-pre[j-1])-rightcnt*(A[i]+1);

            //try use need1 first and then try need2 first
            sum1+=need1;
            if(needcnt1>=leftcnt){
                needcnt1-=leftcnt;
                sum1+=leftcnt;
                if(needcnt1>0){
                    sum1+=need2;
                    sum1+=needcnt1;
                }
            }
            else{
                sum1+=needcnt1;
            }


            sum2+=need2;
            if(needcnt2>=rightcnt){
                needcnt2-=rightcnt;
                sum2+=rightcnt;
                if(needcnt2>0){
                    sum2+=need1;
                    sum2+=needcnt2;
                }
            }
            else{
                sum2+=needcnt2;
            }
            res=Math.min(res,Math.min(sum1,sum2));
            i=j-1;
        }
        out.println(res);
    }

    public void sort(int A[]){
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        for(int i:A)pq.add(i);
        for(int i=0;i<A.length;i++)A[i]=pq.poll();
    }
}




