// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int(),k=Int();
            int A[]=Arr(n);

            Solution sol=new Solution(out);
            sol.solution(A,k);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }

    Map<Integer,Integer>f=new HashMap<>();
    public void solution(int A[],int k){
        long res=0;
        int id=0;
        for(int i:A){
            if(!f.containsKey(i))f.put(i,id++);
        }

        for(int i=0;i<A.length;i++){
            A[i]=f.get(A[i]);
        }


        Seg seg=new Seg(0,id+10);
        for(int i=0,j=0;i<A.length;i++){
            int cur=A[i];
            seg.update(cur,1);

            while(seg.query(0,id+5)>=k){
                res+=(A.length-i);
                seg.update(A[j],-1);
                j++;
            }
        }

        out.println(res);
    }

}


class Seg{
    int l,r;
    int max=0;
    Seg left=null,right=null;
    public Seg(int l,int r){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new Seg(l,mid);
            if(r>=mid+1)right=new Seg(mid+1,r);
        }else{

        }
    }
    public int query(int s,int e){
        if(l==s&&r==e){
            return max;
        }
        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }else{
            return Math.max(left.query(s,mid),right.query(mid+1,e));
        }
    }

    public void update(int index,int val){
        if(l==r){
            max+=val;
            return;
        }
        int mid=l+(r-l)/2;
        if(index<=mid){
            left.update(index,val);
        }else{
            right.update(index,val);
        }
        this.max=Math.max(left.max,right.max);
    }
}











/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

