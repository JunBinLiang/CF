// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            String s=Str();
            int q[][]=new int[m][2];
            for(int i=0;i<m;i++){
                q[i][0]=Int()-1;
                q[i][1]=Int()-1;
            }

            Solution sol=new Solution(out);
            sol.solution(s,q);
        }
        out.close();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }





    public void solution(String s,int q[][]){
        char A[]=s.toCharArray();
        int n=A.length;
        int dp[][]=new int[n][2];//min max
        int pre[][]=new int[n][3];
        int sum=0;
        int mx=0,mn=0;

        for(int i=0;i<A.length;i++){
            if(A[i]=='+')sum++;
            else sum--;
            mx=Math.max(mx,sum);
            mn=Math.min(mn,sum);
            pre[i][0]=mn;
            pre[i][1]=mx;
            pre[i][2]=sum;
        }



        if(A[n-1]=='+'){
            dp[n-1][1]=1;
        }
        else{
            dp[n-1][0]=-1;
        }


       for(int i=n-2;i>=0;i--){
           if(A[i]=='+'){
               dp[i][0]=Math.min(0,dp[i+1][0]+1);
               dp[i][1]=Math.max(0,dp[i+1][1]+1);
               dp[i][1]=Math.max(1,dp[i][1]);

           }
           else{
               dp[i][0]=Math.min(0,dp[i+1][0]-1);
               dp[i][1]=Math.max(0,dp[i+1][1]-1);
               dp[i][0]=Math.min(-1,dp[i][0]);
           }
       }





        for(int p[]:q){
            int l=p[0],r=p[1];
            if(l==0&&r==n-1){
                out.println(1);
            }
            else{
                int res=0;
                if(l==0){
                    res=dp[r+1][1]-dp[r+1][0]+1;
                }
                else if(r==n-1){
                    res=pre[l-1][1]-pre[l-1][0]+1;
                }
                else{
                    int mn1=pre[l-1][0];
                    int mx1=pre[l-1][1];

                    int cur=pre[l-1][2];
                    int mn2=cur+dp[r+1][0];
                    int mx2=cur+dp[r+1][1];

                    mx1=Math.max(mx1,mx2);
                    mn1=Math.min(mn1,mn2);
                    res=mx1-mn1+1;
                }
                out.println(res);
            }
        }

    }





}







/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/


