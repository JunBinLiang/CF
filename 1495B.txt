// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;








// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {


        PrintWriter out = new PrintWriter(System.out);
        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[]){
        int n=A.length;
        int res=0;
        Set<Integer>set=new HashSet<>();

        int left[]=new int[n];int right[]=new int[n];
        int mx1[]=new int[n];int mx2[]=new int[n];
        int mx=1;
        mx1[0]=1;mx2[n-1]=1;
        left[0]=1;right[n-1]=1;

        for(int i=1;i<left.length;i++){
            if(A[i]>A[i-1])left[i]=1+left[i-1];
            else left[i]=1;
            mx1[i]=Math.max(mx1[i-1],left[i]);
            mx=Math.max(mx,mx1[i]);
        }

        for(int i=n-2;i>=0;i--){
            if(A[i]>A[i+1])right[i]=1+right[i+1];
            else right[i]=1;
            mx2[i]=Math.max(mx2[i+1],right[i]);
            mx=Math.max(mx,mx2[i]);
        }

        for(int i=0;i<n;i++){
            if(left[i]==mx||right[i]==mx)set.add(i);
        }

        if(set.size()>1){
            out.println(res);
            return;
        }


        for(int i=1;i<n-1;i++){
            if(A[i]<A[i+1]||A[i]<A[i-1])continue;//can block imediately
            if(left[i]==mx||right[i]==mx){
                if(left[i]==right[i]&&left[i]%2==1){
                    res++;
                }
            }

        }


        out.println(res);
    }

    public int get(int A[],int i){
        if(i<0||i>=A.length)return -1;
        return A[i];
    }


}



