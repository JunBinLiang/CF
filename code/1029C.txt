// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                A[i][1]=Int();
            }


            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }



    public void solution(int A[][]){
        int n=A.length;
        int l[][]=new int[n][3];
        int r[][]=new int[n][3];
        l[0]=new int[]{A[0][0],A[0][1],1};
        r[n-1]=new int[]{A[n-1][0],A[n-1][1],1};
        for(int i=1;i<n;i++){
            l[i]=merge(A[i],new int[]{l[i-1][0],l[i-1][1]});
            if(l[0][2]==0)break;
        }

        for(int i=n-2;i>=0;i--){
            r[i]=merge(A[i],new int[]{r[i+1][0],r[i+1][1]});
            if(r[i][2]==0)break;
        }

        int res=0;
        if(l[n-2][2]!=0){
            res=Math.max(res,l[n-2][1]-l[n-2][0]);
        }

        if(r[1][2]!=0){
            res=Math.max(res,r[1][1]-r[1][0]);
        }


        //for(int p[]:l){
          //  System.out.println(Arrays.toString(p));
       // }


        for(int i=1;i<n-1;i++){
            if(l[i-1][2]==0||r[i+1][2]==0)continue;
            int seg1[]=new int[]{l[i-1][0],l[i-1][1]};
            int seg2[]=new int[]{r[i+1][0],r[i+1][1]};
            int m[]=merge(seg1,seg2);
            if(m[2]!=0){
                res=Math.max(res,m[1]-m[0]);
            }
        }
        out.println(res);
    }

    public int[] merge(int seg1[],int seg2[]){
        if(seg2[0]>=seg1[1]||seg2[1]<=seg1[0]){
            return new int[]{0,0,0};
        }

        int l=Math.max(seg1[0],seg2[0]);
        int r=Math.min(seg1[1],seg2[1]);
        return new int[]{l,r,1};
    }







}






