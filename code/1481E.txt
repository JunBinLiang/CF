// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }


            Solution sol=new Solution();
            sol.solution(out,A);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[]){
        //hint : find the maximum of unmove box, use n-max
        int n=A.length;
        reverse(A);

        int cnt[]=new int[n+100];
        int dp[]=new int[n];
        int l[]=new int[n+100];Arrays.fill(l,Integer.MAX_VALUE);
        int r[]=new int[n+100];Arrays.fill(r,Integer.MIN_VALUE);

        for(int i=0;i<A.length;i++){
            l[A[i]]=Math.min(l[A[i]],i);
            r[A[i]]=Math.max(r[A[i]],i);
        }



        for(int i=0;i<A.length;i++){
            if(i-1>=0)dp[i]=dp[i-1];
            cnt[A[i]]++;
            if(i==r[A[i]]){
                int left=l[A[i]]-1;
                dp[i]=Math.max(dp[i],cnt[A[i]]+get(dp,left));
            }
            else{
                dp[i]=Math.max(dp[i],cnt[A[i]]);
            }
        }
        out.println(n-dp[n-1]);
    }

    public int get(int A[],int i){
        if(i<0)return 0;
        return A[i];
    }

    public void reverse(int A[]){
        List<Integer>list=new ArrayList<>();
        for(int i:A)list.add(i);
        Collections.reverse(list);
        for(int i=0;i<A.length;i++)A[i]=list.get(i);
    }

}








