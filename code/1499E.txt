// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=1;
        for(int t=0;t<T;t++){
            String a=Str();
            String b=Str();

            Solution sol=new Solution();
            sol.solution(out,a,b);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    int mod=998244353;
    public void solution(PrintWriter out,String s,String t){
        char A[]=s.toCharArray();
        char B[]=t.toCharArray();
        long res=0;
        long dp[][][][][]=new long[s.length()+1][t.length()+1][2][2][2];


        //x:0
        //y:1
        dp[1][0][0][1][0]=1;
        dp[0][1][1][0][1]=1;

        for(int i=2;i<=s.length();i++){
            if(A[i-1]!=A[i-2])dp[i][0][0][1][0]=dp[i-1][0][0][1][0]+1;
            else dp[i][0][0][1][0]=1;
        }
        for(int i=2;i<=t.length();i++){
            if(B[i-1]!=B[i-2])dp[0][i][1][0][1]=dp[0][i-1][1][0][1]+1;
            else dp[0][i][1][0][1]=1;
        }


        for(int i=1;i<=s.length();i++){
            char x=A[i-1];
            for(int j=1;j<=t.length();j++){
                char y=B[j-1];

                //end with a
                if(i==1){
                    if(x!=B[j-1]){
                        dp[i][j][0][1][1]+=dp[i-1][j][1][0][1];
                        dp[i][j][0][1][1]+=dp[i-1][j][1][1][1];
                    }
                }
                else{
                    if(x!=B[j-1]){
                        dp[i][j][0][1][1]+=dp[i-1][j][1][0][1];
                        dp[i][j][0][1][1]+=dp[i-1][j][1][1][1];
                    }

                    if(x!=A[i-2]) {
                        dp[i][j][0][1][0] += dp[i-1][j][0][1][0];
                        dp[i][j][0][1][1] += dp[i-1][j][0][1][1];

                        //dp[i][j][0][1][0]+=dp[i-1][j][0][1][0];
                    }
                }


                //end with b
                if(j==1){
                    if(y!=A[i-1]){
                        dp[i][j][1][1][1]+=dp[i][j-1][0][1][0];
                        dp[i][j][1][1][1]+=dp[i][j-1][0][1][1];
                    }
                }
                else{
                    if(y!=A[i-1]){
                        dp[i][j][1][1][1]+=dp[i][j-1][0][1][0];
                        dp[i][j][1][1][1]+=dp[i][j-1][0][1][1];
                    }
                    if(y!=B[j-2]){
                        dp[i][j][1][0][1]+=dp[i][j-1][1][0][1];
                        dp[i][j][1][1][1]+=dp[i][j-1][1][1][1];

                        //dp[i][j][1][0][1]+=dp[i][j-1][1][0][1];
                    }
                }



                for(int a=0;a<2;a++){
                    for(int b=0;b<2;b++){
                        for(int c=0;c<2;c++){
                            dp[i][j][a][b][c]%=mod;
                        }
                    }
                }
                dp[i][j][0][1][0]++;//end with x
                dp[i][j][1][0][1]++;//end with y
                res+=dp[i][j][0][1][1];
                res+=dp[i][j][1][1][1];
                res%=mod;
            }
        }

        //System.out.println(dp[1][1][0][1][1]); //1 ba
       // System.out.println(dp[1][1][1][1][1]); //1 ab
       // System.out.println(dp[2][1][0][1][1]); //3 ba aba
       // System.out.println(dp[2][1][1][1][1]);//1
        out.println(res);
    }


}


