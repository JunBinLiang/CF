// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int(),m=Int(),D=Int();
            int edges[][]=new int[m][2];
            for(int i=0;i<m;i++){
                edges[i][0]=Int()-1;
                edges[i][1]=Int()-1;
            }

            Solution sol=new Solution(out);
            sol.solution(n,edges,D);
        }
        out.close();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }



    public void solution(int n,int edges[][],int D){
        int cnt[]=new int[n];
        List<Integer>g[]=new ArrayList[n];
        List<int[]>res=new ArrayList<>();
        int nums[]=new int[n];

        for(int i=0;i<n;i++){
            nums[i]=i;
        }

        for(int i=0;i<n;i++){
            g[i]=new ArrayList<>();
        }

        for(int e[]:edges){
            int u=e[0],v=e[1];
            cnt[u]++;cnt[v]++;
            g[u].add(v);g[v].add(u);
        }
        if(cnt[0]<D){
            out.println("NO");
            return;
        }



        for(int e[]:edges){
            int u=e[0],v=e[1];
            if(u==0||v==0)continue;
            int r1=find(nums,u);
            int r2=find(nums,v);
            if(r1!=r2)nums[r1]=r2;
        }

        Set<Integer>set=new HashSet<>();
        for(int u:g[0]){
            int r=find(nums,u);
            set.add(r);
        }

        if(set.size()>D){//strongly connect component
            out.println("NO");
            return;
        }


        Queue<Integer>q=new LinkedList<>();
        set.clear();
        cnt[0]=-1;
        for(int u:g[0]){
            int r=find(nums,u);
            if(D==0)break;
            if(!set.contains(r)){
                set.add(r);
                q.add(u);
                cnt[u]=-1;
                res.add(new int[]{1,u+1});
                D--;
            }
        }

        for(int u:g[0]){
            if(D==0)break;
            if(cnt[u]!=-1){
                cnt[u]=-1;
                q.add(u);
                res.add(new int[]{1,u+1});
                D--;
            }
        }





        while(q.size()>0){
            int top=q.poll();
            for(int next:g[top]){
                if(cnt[next]!=-1){
                    res.add(new int[]{top+1,next+1});
                    cnt[next]=-1;
                    q.add(next);
                }
            }
        }

        out.println("YES");
        for(int p[]:res){
            out.println(p[0]+" "+p[1]);
        }
    }

    public int find(int nums[],int x){//union find => find method
        if(nums[x]==x)return x;
        int root=find(nums,nums[x]);
        nums[x]=root;
        return root;
    }





}










/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/


