// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);

            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    List<Integer>list=new ArrayList<>();
    int f1[][],f2[][];
    public void solution(int A[]) {
        int l=1,r=A.length;
        int res=1;

        f1=new int[A.length][21];//min
        f2=new int[A.length][21];//gcd


        for(int i=0;i<A.length;i++){
            list.add(i);
            f1[i][0]=f2[i][0]=A[i];
        }

        for(int j = 1;j<f1[0].length;j++){
            for(int i=0;i<A.length;i++){
                if((i+(1<<(j-1))) >= A.length)break;
                f1[i][j]=Math.min(f1[i][j-1],f1[i+(1<<(j-1))][j-1]);
                f2[i][j]=gcd(f2[i][j-1],f2[i+(1<<(j-1))][j-1]);
            }
        }



        while(l<=r){
            int mid = l + (r - l)/2;
            if(check(A,mid)){
                res=mid;
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }

        out.println(list.size()+" "+(res -1));
        for(int j:list){
            out.print(j+" ");
        }
    }


    public boolean check(int A[],int mid){
        boolean res =false;
        List<Integer>l=new ArrayList<>();
        for(int i =0;i<A.length;i++){
            if(i+mid-1>=A.length)break;
            int g=-1;
            int mn=Integer.MAX_VALUE;
            int start = i;
            for(int j=0;j<21;j++){
                if((mid&(1<<j))!=0){
                    if(g==-1){
                        g=f2[start][j];
                    }
                    else{
                        g=gcd(g,f2[start][j]);
                    }
                    mn=Math.min(mn,f1[start][j]);
                    start+=(1<<j);
                }
            }
            if(g%mn==0){
                l.add(i+1);
                res=true;
            }
        }

        if(res){
            this.list=l;
        }
        return res;
    }

    public int gcd(int num1, int num2) {
        if (num2 != 0){
            return gcd(num2, num1 % num2);
        } else{
            return num1;
        }
    }

}

















