// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;








// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();int k=Int();
            int A[]=new int[n];

            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Sol sol=new Sol();
            sol.solution(out,A,m,k);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Sol{
    public void solution(PrintWriter out,int A[],int m,int k){
        int res=0;
        Map<Integer,Integer>f=new HashMap<>();
        Seg seg=new Seg(0,m+10);

        for(int i=0,l=0;i<A.length;i++){
            put(f,A[i]);
            seg.update(A[i],1);
            while(true){
                int mx=seg.query(0,m+5);
                if(mx+k<(i-l+1)){
                    seg.update(A[l],-1);
                    remove(f,A[l]);
                    l++;
                }
                else{
                    break;
                }
            }
            res=Math.max(res,seg.query(0,m+5));
        }
        out.println(res);

    }

    public void put(Map<Integer,Integer>f,int key){
        if(!f.containsKey(key))f.put(key,1);
        else f.put(key,f.get(key)+1);
    }

    public void remove(Map<Integer,Integer>f,int key){
        f.put(key,f.get(key)-1);
        if(f.get(key)==0)f.remove(key);
    }

    class Seg{
        int l,r;
        int max=0;
        Sol.Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
            }else{

            }
        }
        public int query(int s,int e){
            if(l==s&&r==e){
                return max;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.max(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                max+=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.max=Math.max(left.max,right.max);
        }
    }
}






