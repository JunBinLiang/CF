// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            int A[]=Arr(n);
            int B[]=Arr(m);

            Solution sol=new Solution(out);
            sol.solution(A,B);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }



    public void solution(int A[],int B[]){
        int primes[]=new int[10000010];
        Arrays.fill(primes,1);
        for(int i=2;i<primes.length;i++){
            if(primes[i]!=1)continue;
            for(int j=i;j<primes.length;j+=i){
                primes[j]=i;
            }
        }


        int p1[]=new int[10000010];
        int p2[]=new int[10000010];
        for(int i:A){
            int j=i;
            while(j>1){
                int biggestP=primes[j];
                p1[biggestP]++;
                j/=biggestP;
            }
        }
        for(int i:B){
            int j=i;
            while(j>1){
                int biggestP=primes[j];
                p2[biggestP]++;
                j/=biggestP;
            }
        }


        for(int i=2;i<p1.length;i++){
            if(p1[i]==p2[i]){
                p1[i]=p2[i]=0;
                continue;
            }
            int mn=Math.min(p1[i],p2[i]);
            p1[i]-=mn;
            p2[i]-=mn;
        }

        out.println(A.length+" "+B.length);

        for(int i:A){
            int j=i;
            int res=1;
            while(j>1){
                int biggestP=primes[j];
                if(p1[biggestP]>0){
                    res*=biggestP;
                    p1[biggestP]--;
                }
                j/=biggestP;
            }
            out.print(res+" ");
        }out.println();


        for(int i:B){
            int j=i;
            int res=1;
            while(j>1){
                int biggestP=primes[j];
                if(p2[biggestP]>0){
                    res*=biggestP;
                    p2[biggestP]--;
                }
                j/=biggestP;
            }
            out.print(res+" ");
        }out.println();


    }


}




