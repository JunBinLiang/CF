// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int m=Int();
            int A[][]=new int[n][m];
            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    A[i][j]=Int();
                }
            }

            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }



    public void solution(int A[][]){
        int n=A.length,m=A[0].length;
        int cap[][]=new int[n*m+2][n*m+2];
        int cost[][]=new int[n*m+2][n*m+2];
        int S=n*m;
        int T=n*m+1;

        int dir[][]=new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                int id1=i*m+j;
                if((i+j)%2==0){
                    MinCostFlowSimple.addEdge(cap,cost,S,id1,1,0);
                    for(int p[]:dir){
                        int r=i+p[0];
                        int c=j+p[1];
                        if(r<0||r>=n||c<0||c>=m)continue;
                        int id2=r*m+c;
                        MinCostFlowSimple.addEdge(cap,cost,id2,T,1,0);
                        if(A[i][j]==A[r][c]){
                            MinCostFlowSimple.addEdge(cap,cost,id1,id2,1,0);
                        }
                        else{
                            MinCostFlowSimple.addEdge(cap,cost,id1,id2,1,1);
                        }
                    }
                }
            }
        }

        int res[]=MinCostFlowSimple.minCostFlow(cap,cost,S,T);
        out.println(res[0]+" ");

    }




}

class MinCostFlowSimple {

    public static int[] minCostFlow(int[][] cap, int[][] cost, int s, int t) {
        int n = cap.length;
        int[] d = new int[n];
        int[] p = new int[n];
        for (int flow = 0, flowCost = 0;; ++flow) {
            Arrays.fill(d, Integer.MAX_VALUE);
            d[s] = 0;
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    for (int k = 0; k < n; k++)
                        if (cap[j][k] > 0 && d[j] < Integer.MAX_VALUE && d[k] > d[j] + cost[j][k]) {
                            d[k] = d[j] + cost[j][k];
                            p[k] = j;
                        }
            if (d[t] == Integer.MAX_VALUE)
                return new int[] { flowCost, flow };
            flowCost += d[t];
            for (int v = t; v != s; v = p[v]) {
                --cap[p[v]][v];
                ++cap[v][p[v]];
            }
        }
    }

    public static void addEdge(int[][] cap, int[][] cost, int u, int v, int edgeCapacity, int edgeCost) {
        cap[u][v] = edgeCapacity;
        cost[u][v] = edgeCost;
        cost[v][u] = -edgeCost;
    }

    // Usage example
    /*public static void main(String[] args) {
        int n = 3;
        int[][] capacity = new int[n][n];
        int[][] cost = new int[n][n];
        addEdge(capacity, cost, 0, 1, 3, 1);
        addEdge(capacity, cost, 0, 2, 2, 1);
        addEdge(capacity, cost, 1, 2, 2, 1);
        int[] costFlow = minCostFlow(capacity, cost, 0, 2);
        System.out.println(6 == costFlow[0]);
        System.out.println(4 == costFlow[1]);
    }*/
}




