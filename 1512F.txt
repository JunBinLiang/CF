因为他A 是上升的关系，我们肯定是能到达下一个就立马到达下一个！


// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);


        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();long c=Int();
            long A[]=new long[n];long B[]=new long[n-1];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }
            for(int i=0;i<B.length;i++){
                B[i]=Int();
            }

            Solution sol=new Solution(out);
            sol.solution(A,B,c);
        }
        out.flush();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }





    public void solution(long A[],long B[],long price){
        long res=Integer.MAX_VALUE;
        long sum=0;
        long days=0;
        for(int i=0;i<A.length;i++){
            long remain=price-sum;
            if(remain<=0){
                res=Math.min(res,days);
            }
            else{
                long b=remain/A[i];
                if(remain%A[i]!=0)b++;
                res=Math.min(res,b+days);
            }

            if(i!=A.length-1){
                days++;
                if(B[i]<=sum){
                    sum-=B[i];
                }
                else{
                    long need=B[i]-sum;
                    long a=need/A[i];
                    if(need%A[i]!=0)a++;
                    days+=a;
                    sum=sum+a*A[i]-B[i];
                }
            }
        }
        out.println(res);

    }



}



/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/





