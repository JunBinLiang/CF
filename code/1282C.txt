// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();int k=Int();
            int a=Int();int b=Int();
            int A[][]=new int[n][2];

            for(int i=0;i<n;i++){
                A[i][0]=Int();
            }

            for(int i=0;i<n;i++){
                A[i][1]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A,k,a,b);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[][],int T,long a,long b){
        long res=0;
        Arrays.sort(A,(aa,bb)->{
            return aa[1]-bb[1];
        });
        int one=0,zero=0;

        for(int i=0;i<A.length;i++){
            if(A[i][0]==0)zero++;
            else one++;
        }

        long sum=0;

        int first=Math.min(T,A[0][1]-1);
        long cnt1=0;
        if(first>=zero*a){
            cnt1+=zero;
            first-=zero*a;
            cnt1+=Math.min(one,first/b);
        }
        else{
            cnt1=first/a;
        }
        res=Math.max(res,cnt1);


        for(int i=0;i<A.length;i++){
            int j=i;
            while(j<A.length&&A[j][1]==A[i][1]){
                if(A[j][0]==0){
                    sum+=a;
                    zero--;
                }
                else{
                    sum+=b;
                    one--;
                }
                j++;
            }

            int next=Math.min(T,get(A,j)-1);
            if(next>=sum){
                int cnt=j;
                long remain=next-sum;

                if(remain>=zero*a){
                    cnt+=zero;
                    remain-=zero*a;
                    cnt+=Math.min(one,remain/b);
                }else{
                    cnt+=(remain/a);
                }

                res=Math.max(res,cnt);
            }
            i=j-1;
        }



        out.println(res);
    }

    public int get(int A[][],int i){
        if(i>=A.length)return Integer.MAX_VALUE;
        return A[i][1];
    }


}

