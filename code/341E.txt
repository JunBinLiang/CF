// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;






// Please name your class Main
public class Main {
    static Scanner in = new Scanner(System.in);
    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int b=Int();int k=Int();int x=Int();

            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }
            Solution sol=new Solution();
            sol.solution(out,A,n,b,k,x);

        }
        out.flush();

    }

    public static long Long(){
        return in.nextLong();
    }
    public static int Int(){
        return in.nextInt();
    }
    public static String Str(){
        return in.next();
    }
}


class Solution{
    public void solution(PrintWriter out,int A[],int n,int b,int k,int m){


        //number%x == k
        //dp[i][(j*10+cur)%x]+=(dp[i-1][j]*cnt[cur]) =>change to matrix
        //cnt[cur] is constant
        long res=0;
        Matrix M=new Matrix();
        int cnt[]=new int[10];
        long dp[]=new long[m];


        for(int i:A){
            cnt[i]++;
        }
        //initialize dp
        for(int i=0;i<10;i++){
            dp[i%m]+=cnt[i];
        }


        long mat[][]=new long[m][m];
        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                for(int x=0;x<m;x++){
                    if((j*10+x)%m==i){
                        mat[i][j]+=dp[x];
                    }
                }
            }
        }

        mat=M.matrixPower(mat,b-1,1000000007);
        for(int i=0;i<m;i++){
            res+=mat[k][i]*dp[i];
            res%=1000000007;
        }
        System.out.println(res);
    }

}

class Matrix {


    //int mod=1000000007;
    /**
     * compute pow(base, pow)
     * O(N^3) * logN
     **/
    public long[][] matrixPower(long [][] base, long pow,int mod)	{
        int N = base.length;
        long [][] ans = new long [N][N];
        // generate identity matrix
        for (int i = 0; i < N; i++)	ans[i][i] = 1;

        // binary exponentiation
        while ( pow != 0 )	{
            if	( (pow&1) != 0 )	ans = multiplyMatrix(ans, base,mod);

            base = multiplyMatrix(base, base,mod);

            pow >>= 1;
        }

        return	ans;
    }

    /**
     * compute m * m2
     * O(N^3)
     **/
    public long [][] multiplyMatrix(long [][] m, long [][] m2,int mod)	{
        int N = m.length;
        long [][] ans = new long [N][N];

        for (int i = 0; i < N; i++)	for (int j = 0; j < N; j++)	{
            ans[i][j] = 0;
            for (int k = 0; k < N; k++)	{
                ans[i][j] += m[i][k] * m2[k][j];
                ans[i][j] %= mod;
            }
        }

        return	ans;
    }

}
