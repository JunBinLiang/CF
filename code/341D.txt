// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            long q[][]=new long[m][6];
            for(int i=0;i<q.length;i++){
                q[i][0]=Int();
                if(q[i][0]==2){
                    q[i][1]=Long();
                    q[i][2]=Long();
                    q[i][3]=Long();
                    q[i][4]=Long();
                    q[i][5]=Long();
                }
                else{
                    q[i][1]=Long();
                    q[i][2]=Long();
                    q[i][3]=Long();
                    q[i][4]=Long();
                }
            }

            Solution sol=new Solution(out);
            sol.solution(n,q);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }

    long tree[][][][];
    int N;
    public void solution(int n,long q[][]){
        tree=new long[2][2][n+2][n+2];
        this.N=n;

        for(int i=0;i<q.length;i++){
            long type=q[i][0];
            int x1=(int)(q[i][1]),y1=(int)(q[i][2]);
            int x2=(int)(q[i][3]),y2=(int)(q[i][4]);
            if(type==1){
                long res=0;
                res^=query(x2,y2);
                res^=query(x1-1,y2);
                res^=query(x2,y1-1);
                res^=query(x1-1,y1-1);
                out.println(res);
            }
            else{
                long val=q[i][5];
                update(x1,y1,val);
                update(x1,y2+1,val);
                update(x2+1,y1,val);
                update(x2+1,y2+1,val);
            }
        }
    }

    public long query(int x,int y){
        long res=0;
        for (int i=x; i > 0; i -= (i & -i)) {
            for (int j=y; j > 0; j -= (j & -j)){
                res^=tree[x%2][y%2][i][j];
            }
        }
        return res;
    }

    public void update(int x, int y, long val) {
        for (int i=x; i <= N; i += (i & -i)) {
            for (int j=y; j <= N; j += (j & -j)){
                tree[x%2][y%2][i][j] ^= val;
            }
        }
    }
}










