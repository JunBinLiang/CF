// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;






// Please name your class Main
public class Main {
    static Scanner in = new Scanner(System.in);
    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();int k=Int();
            int A[]=new int[n];
            for(int i=0;i<n;i++){
                A[i]=Int();
            }

            Solution sol=new Solution();
            sol.solution(out,A,k);
        }
        out.flush();

    }

    public static long Long(){ return in.nextLong();}
    public static int Int(){
        return in.nextInt();
    }
    public static String Str(){
        return in.next();
    }
}



class Solution{
    public void solution(PrintWriter out,int A[],int k){
        int l=1;
        int r=0;
        for(int i:A){
            r=Math.max(r,i);
        }

        int res=-1;

        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(A,mid,k)){
                res=mid;
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }


        System.out.println(res);


    }

    public boolean check(int B[],int mid,int k){
        int A[]=new int[B.length];
        for(int i=0;i<A.length;i++){
            if(B[i]<mid){
                A[i]=-1;
            }
            else{
                A[i]=1;
            }
        }

        int pre[]=new int[A.length];
        int sum=0;
        for(int i=0;i<A.length;i++){
            sum+=A[i];
            pre[i]=sum;
            if(i+1>=k){
                int min=0;
                if(pre[i]-min>0){
                    return true;
                }
            }
        }


        PriorityQueue<Integer>pq1=new PriorityQueue<>();
        PriorityQueue<Integer>pq2=new PriorityQueue<>();


        for(int i=0;i<A.length;i++){
            if(i+1<k)continue;

            if(pq1.size()!=0&&pre[i]-pq1.peek()>0){
                return true;
            }


            pq1.add(pre[i-k+1]);
        }
        return false;
    }


}


// 0 0 1 1 1 1 2
