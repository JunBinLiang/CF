// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int m=Int();
            List<Integer>graph[]=new ArrayList[n];
            Arrays.setAll(graph,e->new ArrayList<>());

            for(int i=0;i<m;i++){
                int u=Int()-1;
                int v=Int()-1;
                graph[u].add(v);
                graph[v].add(u);
            }

            Solution sol=new Solution(out);
            sol.solution(n,graph);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }

    List<Integer>graph[];
    boolean seen[];
    int singlemax=0;
    int dis[];
    int dep=0;
    List<Integer>nodes=new ArrayList<>();
    int res=0;
    public void solution(int n,List<Integer>graph[]) {
        this.graph=graph;
        seen=new boolean[n];
        dis=new int[n];


        for(int i=0;i<n;i++){
            dep=0;
            dfs1(-1,i,1);
            dis[i]=dep;
        }

        List<int[]>dia=new ArrayList<>();
        List<Integer>centers=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(!seen[i]){
                singlemax=Integer.MIN_VALUE;
                seen[i]=true;
                nodes=new ArrayList<>();
                dfs(i);
                res=Math.max(res,singlemax-1);
                int mn=INF;
                int center=-1;
                for(int j:nodes){
                    if(dis[j]<mn){
                        mn=dis[j];
                        center=j;
                    }
                }
                dia.add(new int[]{mn,center});
            }
        }



        Collections.sort(dia,(a,b)->{
            return b[0]-a[0];
        });

        if(dia.size()==1){
            out.println(res);
            return;
        }
        else{
            res=Math.max(res,dia.get(0)[0]+dia.get(1)[0]-1);
            if(dia.size()>2){
                res=Math.max(res,1+dia.get(1)[0]+dia.get(2)[0]-1);
            }

            out.println(res);
            for(int i=1;i<dia.size();i++){
                out.println((dia.get(0)[1]+1)+" "+(dia.get(i)[1]+1));
            }
        }

    }

    public void dfs1(int parent,int root,int level){
        dep=Math.max(dep,level);
        for(int next:graph[root]){
            if(next!=parent){
                dfs1(root,next,level+1);
            }
        }
    }


    public int dfs(int root){//Do diameter for each component tree
        List<Integer>list=new ArrayList<>();
        nodes.add(root);

        for(int next:graph[root]){
            if(!seen[next]){
                seen[next]=true;
                int h=dfs(next);
                list.add(h);
            }
        }
        Collections.sort(list,(a,b)->{
            return b-a;
        });

        if(list.size()==0){
            singlemax=Math.max(singlemax,1);
            return 1;
        }
        else if(list.size()==1){
            singlemax=Math.max(list.get(0)+1,singlemax);
            return list.get(0)+1;
        }
        else{
            singlemax=Math.max(list.get(0)+list.get(1)+1,singlemax);
            return 1+list.get(0);
        }
    }



}




