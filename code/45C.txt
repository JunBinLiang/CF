// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            String s=Str();
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                if(s.charAt(i)=='B')A[i][1]=1;
            }

            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }


    public void solution(int A[][]){
        //0:girl 1:boy
        TreeSet<Integer>tree=new TreeSet<>();
        for(int i=0;i<A.length;i++){
            tree.add(i);
        }

        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            if(a[0]==b[0]){//same
                return a[1]-b[1];
            }
            else{
                return a[0]-b[0];
            }
        });

        for(int i=1;i<A.length;i++){
            int dif=Math.abs(A[i][0]-A[i-1][0]);
            int pair[]=new int[]{dif,i-1,i};
            pq.add(pair);
        }

        List<int[]>res=new ArrayList<>();
        while(pq.size()>0){
            int top[]=pq.poll();
            int l=top[1],r=top[2];
            if(!tree.contains(l)||!tree.contains(r))continue;
            if(A[l][1]==A[r][1])continue;
            tree.remove(l);tree.remove(r);
            res.add(new int[]{l,r});
            Integer floor=tree.floor(l);
            Integer ceil=tree.ceiling(r);
            if(floor!=null&&ceil!=null){
                int dif=Math.abs(A[ceil][0]-A[floor][0]);
                pq.add(new int[]{dif,floor,ceil});
            }
        }



        out.println(res.size());
        for(int p[]:res){
            out.println((p[0]+1)+" "+(p[1]+1));
        }
    }


}











/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

