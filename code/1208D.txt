// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            long A[]=new long[n];
            for(int i=0;i<A.length;i++){
                A[i]=Long();
            }
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }





    public void solution(long A[]){
        int n=A.length;
        int arr[]=new int[n];
        int res[]=new int[n];
        TreeSet<Integer>tree=new TreeSet<>();
        for(int i=0;i<arr.length;i++){
            arr[i]=i+1;
            tree.add(i);
        }


        FenWick fen=new FenWick(arr);
        for(int i=n-1;i>=0;i--){
            int l=0,r=A.length-1;
            int pos=-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                long sum=fen.sumRange(0,mid);
                if(sum>A[i]){
                    pos=mid;
                    r=mid-1;
                }
                else{
                    l=mid+1;
                }
            }

            Integer high=tree.ceiling(pos);
            res[i]=high+1;
            fen.update(high,-(high+1));
            tree.remove(high);
        }


        for(int i:res){
            out.print(i+" ");
        }
    }



    class FenWick {
        long tree[];//1-index based
        int A[];
        int arr[];
        public FenWick(int[] A) {
            this.A=A;
            arr=new int[A.length];
            tree=new long[A.length+1];
            for(int i=0;i<A.length;i++){
                update(i,A[i]);
            }
        }

        public void update(int i, int val) {
            arr[i]=+val;
            i++;
            while(i<tree.length){
                tree[i]+=val;
                i+=(i&-i);
            }
        }

        public long sumRange(int i, int j) {
            return pre(j+1)-pre(i);
        }

        public long pre(int i){
            long sum=0;
            while(i>0){
                sum+=tree[i];
                i-=(i&-i);
            }
            return sum;
        }
    }






}










/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/


