// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int(),m=Int();
            int A[]=new int[n];
            int B[][]=new int[m][2];
            for(int i=0;i<n;i++){
                int x=Int();
                int val=0;
                for(int j=0;j<x;j++){
                    int a=Int()-1;
                    val=val|(1<<a);
                }
                A[i]=val;
            }

            for(int i=0;i<m;i++){
                int price=Int();
                int x=Int();
                int val=0;
                for(int j=0;j<x;j++){
                    int a=Int()-1;
                    val=val|(1<<a);
                }
                B[i][0]=price;
                B[i][1]=val;
            }

            Solution sol=new Solution(out);
            sol.solution(A,B);
        }
        out.close();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }




    int INF=Integer.MAX_VALUE;
    public void solution(int A[],int B[][]){
        PriorityQueue<int[]>q[]=new PriorityQueue[512];
        for(int i=0;i<q.length;i++){
            q[i]=new PriorityQueue<>((a,b)->{
                return b[0]-a[0];
            });
        }


        for(int i=0;i<B.length;i++){
            int p[]=B[i];
            int price=p[0],mask=p[1];
            q[mask].add(new int[]{price,i+1});
            while(q[mask].size()>2)q[mask].poll();
        }

        int ff[][]=new int[512][3];
        for(int i=0;i<ff.length;i++){
            Arrays.fill(ff[i],INF);
        }




        for(int i=0;i<q.length;i++){
            if(q[i].size()==0)continue;
            for(int j=i;j<q.length;j++){
                if(q[j].size()==0)continue;
                if(i==j){
                    if(q[i].size()>1){
                        int mask=i;
                        int p1[]=q[i].poll();
                        int p2[]=q[j].peek();

                        if(p1[0]+p2[0]<ff[mask][0]){
                            ff[mask][0]=p1[0]+p2[0];
                            ff[mask][1]=p1[1];
                            ff[mask][2]=p2[1];
                        }
                    }
                }
                else{
                    int mask=i|j;
                    int p1[]=q[i].poll();
                    int p2[]=q[j].poll();

                    if(q[i].size()>0){
                        if(q[j].size()>0){
                            if(q[i].peek()[0]+q[j].peek()[0]<ff[mask][0]){
                                ff[mask][0]=q[i].peek()[0]+q[j].peek()[0];
                                ff[mask][1]=q[i].peek()[1];
                                ff[mask][2]=q[j].peek()[1];
                            }
                        }
                        else{
                            if(q[i].peek()[0]+p2[0]<ff[mask][0]){
                                ff[mask][0]=q[i].peek()[0]+p2[0];
                                ff[mask][1]=q[i].peek()[1];
                                ff[mask][2]=p2[1];
                            }
                        }
                    }
                    else{
                        if(q[j].size()>0){
                            if(p1[0]+q[j].peek()[0]<ff[mask][0]){
                                ff[mask][0]=p1[0]+q[j].peek()[0];
                                ff[mask][1]=p1[1];
                                ff[mask][2]=q[j].peek()[1];
                            }
                        }
                        else{
                            if(p1[0]+p2[0]<ff[mask][0]){
                                ff[mask][0]=p1[0]+p2[0];
                                ff[mask][1]=p1[1];
                                ff[mask][2]=p2[1];
                            }
                        }
                    }
                    q[i].add(p1);
                    q[j].add(p2);
                }
            }
        }



        int mx=-1;
        int price=INF;
        int res=0;
        for(int i=0;i<ff.length;i++){
            if(ff[i][0]==INF)continue;
            int cnt=0;
            int mask=i;
            for(int j=0;j<A.length;j++){
                int sub=A[j];
                if(((mask&sub)==sub)&&((mask|sub)==mask)){
                   cnt++;
                }
            }
            if(cnt>=mx){
                if(cnt>mx){
                    mx=cnt;
                    price=ff[i][0];
                    res=i;
                }
                else{
                    if(price>ff[i][0]){
                        price=ff[i][0];
                        res=i;
                    }
                }
            }
        }

        out.println(ff[res][1]+" "+ff[res][2]);
    }




}












/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/


