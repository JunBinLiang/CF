// Don't place your source in a package
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);



        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();long sum=Long();
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                A[i][1]=Int();
            }


            Solution sol=new Solution();
            sol.solution(out,A,sum);
        }
        out.flush();

    }

    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}



class Solution{
    public void solution(PrintWriter out,int A[][],long sum){
        Arrays.sort(A,(a,b)->{
            return a[1]-b[1];
        });

        int res=-1;
        int l=Integer.MAX_VALUE,r=Integer.MIN_VALUE;
        for(int i=0;i<A.length;i++){
            l=Math.min(l,A[i][0]);
            r=Math.max(r,A[i][1]);
        }

        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(A,sum,mid)){
                res=mid;
                l=mid+1;
            }
            else{
                r=mid-1;
            }
        }

        out.println(res);
    }

    public boolean check(int A[][],long money,int mid){
        int n=A.length;// (n-1)/2<=mid   (n+1)/2>=mid
        long sum=0;
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->{
            return a[0]-b[0];
        });

        for(int i=0;i<A.length;i++){
            if(A[i][1]>=mid){
                sum+=Math.max(mid,A[i][0]);
                pq.add(new int[]{A[i][0],Math.max(mid,A[i][0])});
            }
            else{
                sum+=A[i][0];
            }
        }


        if(pq.size()<(n+1)/2)return false;

        while(pq.size()>(n+1)/2){
            int top[]=pq.poll();
            sum-=top[1];
            sum+=top[0];
        }
        return sum<=money;
    }

}


