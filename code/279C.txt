// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int  n=Int();int m=Int();
            int A[]=Arr(n);
            int q[][]=new int[m][2];
            for(int i=0;i<m;i++){
                q[i][0]=Int()-1;
                q[i][1]=Int()-1;
            }

            Solution sol=new Solution(out);
            sol.solution(A,q);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    public Solution(PrintWriter out){
        this.out=out;
    }


    Map<Integer,List<Integer>>f=new HashMap<>();
    int A[];
    public void solution(int A[],int q[][]){
        this.A=A;
        Seg seg=new Seg(0,A.length-1);
        for(int i=0;i<A.length;i++){
            if(!f.containsKey(A[i])){
                f.put(A[i],new ArrayList<>());
            }
            f.get(A[i]).add(i);
        }

        int left[]=new int[A.length];
        int right[]=new int[A.length];
        int id=1;
        for(int i=1;i<left.length;i++){
            if(A[i]>=A[i-1]){
                left[i]=left[i-1];
            }
            else{
                left[i]=id++;
            }
        }

        id=1;
        for(int i=A.length-2;i>=0;i--){
            if(A[i]>=A[i+1]){
                right[i]=right[i+1];
            }
            else{
                right[i]=id++;
            }
        }

       // System.out.println(Arrays.toString(left));
        //System.out.println(Arrays.toString(right));

        for(int p[]:q){
            int l=p[0],r=p[1];
            int mx=seg.query(l,r);
            int index=find(f.get(mx),l);
            //System.out.println(l+" "+r+"   "+mx);
            //System.out.println(f.get(mx));
            //System.out.println();

            if(left[l]==left[index]&&right[r]==right[index]){
                out.println("Yes");
            }
            else{
                out.println("No");
            }
        }

    }

    public int find(List<Integer>list,int k){
        int l=0,r=list.size()-1;
        int pos=-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(list.get(mid)>=k){
                pos=list.get(mid);
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return pos;
    }


    class Seg{
        int l,r;
        int max=Integer.MIN_VALUE;
        int i=-1;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                if(left!=null)this.max=Math.max(max,left.max);
                if(right!=null)this.max=Math.max(max,right.max);

            }else{
                max=A[l];
            }
        }
        public int query(int s,int e){
            if(l==s&&r==e){
                return max;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return Math.max(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public void update(int index,int val){
            if(l==r){
                max+=val;
                return;
            }
            int mid=l+(r-l)/2;
            if(index<=mid){
                left.update(index,val);
            }else{
                right.update(index,val);
            }
            this.max=Math.max(left.max,right.max);
        }
    }

}








/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/

