// Don't place your source in a package

import java.math.BigInteger;
import java.util.*;
import java.lang.*;
import java.io.*;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<n;i++){
                A[i][0]=Int();
                A[i][1]=i;
            }
            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.flush();

    }


    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}






class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }


    long dp[][];
    long INF=10000000000000000l;
    public void solution(int A[][]){
        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });
        int res[]=new int[A.length];
        dp=new long[A.length][2];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        dfs(A,0);
        int id=1;

        for(int i=0;i<dp.length;i++){
            long cnt=dp[i][1];
            for(int j=0;j<cnt;j++){
                res[A[i+j][1]]=id;
            }
            i+=cnt-1;
            id++;
        }
        out.println(dp[0][0]+" "+(id-1));

        for(int i:res){
            out.print(i+" ");
        }

    }

    public long dfs(int A[][],int i){
        int cnt=A.length-i;
        if(cnt<6){
            if(cnt<3)return INF;
            else{
                dp[i][0]=A[A.length-1][0]-A[i][0];
                dp[i][1]=cnt;
                return A[A.length-1][0]-A[i][0];
            }
        }
        if(dp[i][0]!=-1){
            return dp[i][0];
        }

        long res=Long.MAX_VALUE;
        cnt=1;
        for(int j=2;j<=4;j++){
            if(A[i+j][0]-A[i][0]+dfs(A,i+j+1)<res){
                res=A[i+j][0]-A[i][0]+dfs(A,i+j+1);
                cnt=j;
            }
        }
        dp[i][0]=res;
        dp[i][1]=cnt+1;
        return res;

    }




}



/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/





