// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int k=Int();
            int A[]=Arr(k);
            int B[]=Arr(k);

            Solution sol=new Solution(out);
            sol.solution(n,A,B);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }



    public void solution(int n,int A[],int B[]) {

        int f[]=new int[n+1];
        for(int i=0;i<A.length;i++){
            int pos=A[i];
            f[pos]=B[i];
        }

        PriorityQueue<int[]>left=new PriorityQueue<>((a,b)->{
            return (a[0]-a[1])-(b[0]-b[1]);
        });
        PriorityQueue<int[]>right=new PriorityQueue<>((a,b)->{
            return (a[0]+a[1])-(b[0]+b[1]);
        });

        for(int i=1;i<f.length;i++){
            if(f[i]!=0){
                right.add(new int[]{f[i],i});
            }
        }

        for(int i=1;i<f.length;i++){
            while(right.size()>0&&right.peek()[1]<i){
                right.poll();
            }

            int mn=Integer.MAX_VALUE;
            if(right.size()>0){
                int peek[]=right.peek();
                mn=Math.min(mn,Math.abs(peek[1]-i)+peek[0]);
            }
            if(left.size()>0){
                int peek[]=left.peek();
                mn=Math.min(mn,Math.abs(peek[1]-i)+peek[0]);
            }

            out.print(mn+" ");
            if(f[i]!=0){
                left.add(new int[]{f[i],i});
            }
        }

        out.println();
    }


}

















