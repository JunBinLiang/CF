// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");


        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            List<int[]>graph[]=new ArrayList[n];
            Arrays.setAll(graph,e->new ArrayList<>());
            long sum=0;
            for(int i=0;i<n-1;i++){
                int u=Int()-1;int v=Int()-1;int w=Int();
                graph[u].add(new int[]{v,w});
                graph[v].add(new int[]{u,w});
                sum+=w*2;
            }

            Solution sol=new Solution(out);
            sol.solution(graph,sum);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    int INF=Integer.MAX_VALUE;
    int MOD=1000000007;
    public Solution(PrintWriter out){
        this.out=out;
    }

    boolean seen[];
    List<int[]>graph[];
    long res=0;
    long mx=0;
    public void solution(List<int[]>graph[],long sum){
        this.graph=graph;
        seen=new boolean[graph.length];

        seen[0]=true;
        dfs(0,0);
        out.println(sum-mx);

    }

    public void dfs(int root,long sum){
        mx=Math.max(mx,sum);
        for(int pair[]:graph[root]){
            int next=pair[0],w=pair[1];
            if(!seen[next]){
                seen[next]=true;
                dfs(next,sum+w);
            }
        }
    }
}




