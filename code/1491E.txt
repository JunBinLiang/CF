// Don't place your source in a package
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;








// Please name your class Main
public class Main {

    static class FastScanner {//scanner from SecondThread
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(System.out);
        FastScanner fs=new FastScanner();
        int T=1;
        for(int t=0;t<T;t++){
            int n= fs.Int();
            Set<Integer>g[]=new HashSet[n];
            for(int i=0;i<g.length;i++){
                g[i]=new HashSet<>();
            }
            for(int i=0;i<n-1;i++){
                int u=fs.Int()-1;int v=fs.Int()-1;
                g[u].add(v);
                g[v].add(u);
            }
            Solution sol=new Solution();
            sol.solution(out,g);
        }
        out.flush();

    }

}



class Solution{
    Set<Integer>g[];
    int count[];
    int dp[];
    int cnt=0;
    int n;
    boolean res=false;
    public void solution(PrintWriter out,Set<Integer>g[]){
        //two ways to cur => we can cut any
        this.g=g;
        n=g.length;

        init(n);
        getCount(-1,0,-1);

        int fib=fib(n);
        if(fib==-1){
            out.println("NO");
            return;
        }


        dfs(-1,0,fib);
        out.println(res?"YES":"NO");
    }

    public void dfs(int parent,int root,int fib){
        if(res)return;


        if(dp[fib]<=2){
            cnt+=dp[fib];
            if(cnt==n){
                res=true;
            }
            return;
        }


        List<Integer>childs=new ArrayList<>(g[root]);
        for(int next:childs){
            if(next!=parent){
                if(count[next]==dp[fib-1]||count[next]==dp[fib-2]){
                    g[root].remove(next);
                    g[next].remove(root);
                    if(count[next]==dp[fib-1]){
                        getCount(parent,root,1);
                        dfs(-1,root,fib-2);
                        dfs(-1,next,fib-1);
                    }
                    else if(count[next]==dp[fib-2]){
                        getCount(parent,root,1);
                        dfs(-1,root,fib-1);
                        dfs(-1,next,fib-2);
                    }
                    return;
                }
                else{
                    dfs(root,next,fib);
                }
            }
        }

    }



    //get the subtree count
    public int getCount(int parent,int root,int dir){
        if(dir!=-1){
            count[root]=1;
            if(parent!=-1){
                count[root]+=getCount(root,parent,-1);
            }
            return count[root];
        }
        else{
            count[root]=1;
            for(int next:g[root]){
                if(next!=parent){
                    count[root]+=getCount(root,next,-1);
                }
            }
            return count[root];
        }


    }

    public void init(int n){
        count=new int[n];
        dp=new int[31];
        dp[0]=dp[1]=1;
        for(int i=2;i<dp.length;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }

    }

    public int fib(int n){
        for(int i=0;i<dp.length;i++){
            if(dp[i]==n)return i;
        }
        return -1;
    }

    public void print(int A[]){
        for(int i:A){
            System.out.print(i+" ");
        }System.out.println();
    }


}

/*
8
1 6
1 2
2 3
3 4
4 5
6 7
7 8
* */
