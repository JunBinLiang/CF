// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=Int();
        for(int t=0;t<T;t++){
            int n=Int();
            int A[]=Arr(n);

            Solution sol=new Solution(out);
            sol.solution(A);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    int A[];
    Seg seg;
    public void solution(int B[]) {

        A=new int[B.length*2];
        for(int i=0;i<A.length;i++){
            A[i]=B[i%B.length];
        }

        seg=new Seg(0,A.length-1);

        int l=0,r=A.length-1;
        int res=A.length;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(check(mid)){
                res=mid;
                r=mid-1;
            }
            else{
                l=mid+1;
            }
        }

        out.println(res);
    }

    public boolean check(int mid){
        int k = 1+mid;
        int g=-1;
        for(int i=0,j=0;i<A.length;i++){
            if(i-j+1<k)continue;
            int gcd=seg.query(j,i);
            if(g==-1){
                g=gcd;
                j++;
            }
            else{
                if(g!=gcd)return false;
                j++;
            }
            if(j==A.length/2)break;
        }



        return true;
    }


    class Seg{
        int l,r;
        int val=0;
        Seg left=null,right=null;
        public Seg(int l,int r){
            this.l=l;
            this.r=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                if(l<=mid)left=new Seg(l,mid);
                if(r>=mid+1)right=new Seg(mid+1,r);
                this.val=gcd(left.val,right.val);
            }else{
                this.val=A[l];
            }
        }
        public int query(int s,int e){
            if(e<0||s<0)return 0;
            if(l==s&&r==e){
                return val;
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            if(e<=mid){
                return left.query(s,e);
            }
            else if(s>=mid+1){
                return right.query(s,e);
            }else{
                return gcd(left.query(s,mid),right.query(mid+1,e));
            }
        }

        public int gcd(int num1, int num2) {
            if (num2 != 0){
                return gcd(num2, num1 % num2);
            } else{
                return num1;
            }
        }
    }



}

















