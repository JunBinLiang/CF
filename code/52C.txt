// Don't place your source in a package
import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;


// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        int T=1;
        for(int t=0;t<T;t++){
            int n=Integer.parseInt(in.readLine().split(" ")[0]);
            int A[]=new int[n];
            String s[]=in.readLine().split(" ");
            for(int i=0;i<n;i++){
                A[i]=Integer.parseInt(s[i]);
            }
            int m=Integer.parseInt(in.readLine().split(" ")[0]);
            int q[][]=new int[m][3];
            for(int i=0;i<m;i++){
                String line[]=in.readLine().split(" ");
                q[i][0]=Integer.parseInt(line[0]);
                q[i][1]=Integer.parseInt(line[1]);
                if(line.length>2){
                    q[i][2]=Integer.parseInt(line[2]);
                }
                else{
                    q[i][2]=Integer.MAX_VALUE;
                }
            }
            Solution sol=new Solution(out);
            sol.solution(A,q);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution{
    PrintWriter out;
    public Solution(PrintWriter out){
        this.out=out;
    }

    int INF=Integer.MAX_VALUE;
    int A[];
    public void solution(int A[],int q[][]){
        this.A=A;
        Seg seg=new Seg(A.length*3+100000);
        for(int i=0;i<A.length;i++)seg.update(i,i,A[i],0);

        for(int i=0;i<q.length;i++){
            int l=q[i][0],r=q[i][1];
            if(q[i][2]==INF){//query
                if(l<=r){
                    long mn=seg.query(l,r,0);
                    out.println(mn+" ");
                }
                else{
                    long mn=Math.min(seg.query(l,A.length-1,0),seg.query(0,r,0));
                    out.println(mn+" ");
                }
            }
            else{//update
                if(l<=r){
                    seg.update(l,r,q[i][2],0);
                }
                else{
                    seg.update(l,A.length-1,q[i][2],0);
                    seg.update(0,r,q[i][2],0);
                }
            }

        }
    }
    

    class Seg{
        long lazymin[];
        long lazysum[];
        int range[][];

        public Seg(int n){
            lazymin=new long[n];
            lazysum=new long[n];
            range=new int[n][2];
            for(int i=0;i<range.length;i++)Arrays.fill(range[i],-1);
            range[0][0]=0;
            range[0][1]=A.length-1;
        }

        public void construct(int id,int l,int r){
            range[id][0]=l;
            range[id][1]=r;
            if(l!=r){
                int mid=l+(r-l)/2;
                int left=id*2+1;
                int right=id*2+2;
                if(l<=mid){
                    construct(left,l,mid);
                    lazymin[id]=Math.min(lazymin[id],lazymin[left]);
                }
                if(r>=mid+1){
                   construct(right,mid+1,r);
                   lazymin[id]=Math.min(lazymin[id],lazymin[right]);
                }
            }
            else{
                lazymin[id]=A[l];
            }
        }


        public long query(int s,int e,int id){
            if(e<0||s<0)return 0;
            int l=range[id][0],r=range[id][1];
            if(l==s&&r==e){
                return lazymin[id];
            }
            int mid=l+(r-l)/2; //left :  to mid-1,
            int left=id*2+1;
            int right=id*2+2;

            if(range[left][0]==-1){
                range[left][0]=l;
                range[left][1]=mid;
            }
            if(range[right][0]==-1){
                range[right][0]=mid+1;
                range[right][1]=r;
            }

            if(e<=mid){//left
                return query(s,e,id*2+1)+lazysum[id];
            }
            else if(s>=mid+1){//right
                return query(s,e,id*2+2)+lazysum[id];
            }else{
                return Math.min(query(s,mid,id*2+1),query(mid+1,e,id*2+2))+lazysum[id];
            }
        }

        public void update(int s,int e,int val,int id){
            int l=range[id][0],r=range[id][1];
            if(s==l&&e==r){
                lazysum[id]+=val;
                lazymin[id]+=val;
                return;
            }

            int mid=l+(r-l)/2;
            int left=id*2+1;
            int right=id*2+2;

            //create tree
            if(range[left][0]==-1){
                range[left][0]=l;
                range[left][1]=mid;
            }
            if(range[right][0]==-1){
                range[right][0]=mid+1;
                range[right][1]=r;
            }


            if(e<=mid){
                update(s,e,val,id*2+1);
            }
            else if(s>=mid+1){
                update(s,e,val,id*2+2);
            }
            else{
                update(s,mid,val,id*2+1);
                update(mid+1,e,val,id*2+2);
            }
            lazymin[id]=Math.min(lazymin[left],lazymin[right])+lazysum[id];
        }
    }
}











/*
                             ;\
                            |' \
         _                  ; : ;
        / `-.              /: : |
       |  ,-.`-.          ,': : |
       \  :  `. `.       ,'-. : |
        \ ;    ;  `-.__,'    `-.|
         \ ;   ;  :::  ,::'`:.  `.
          \ `-. :  `    :.    `.  \
           \   \    ,   ;   ,:    (\
            \   :., :.    ,'o)): ` `-.
           ,/,' ;' ,::"'`.`---'   `.  `-._
         ,/  :  ; '"      `;'          ,--`.
        ;/   :; ;             ,:'     (   ,:)
          ,.,:.    ; ,:.,  ,-._ `.     \""'/
          '::'     `:'`  ,'(  \`._____.-'"'
             ;,   ;  `.  `. `._`-.  \\
             ;:.  ;:       `-._`-.\  \`.
              '`:. :        |' `. `\  ) \
      -hrr-      ` ;:       |    `--\__,'
                   '`      ,'
                        ,-'


                      free bug dog
*/



