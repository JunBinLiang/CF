// Don't place your source in a package


import javax.swing.*;
import java.lang.reflect.Array;
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;
import java.io.*;
import java.math.*;
import java.util.stream.Stream;



// Please name your class Main
public class Main {
    static FastScanner fs=new FastScanner();
    static class FastScanner {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st=new StringTokenizer("");
        public String next() {
            while (!st.hasMoreElements())
                try {
                    st=new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            return st.nextToken();
        }
        int Int() {
            return Integer.parseInt(next());
        }

        long Long() {
            return Long.parseLong(next());
        }

        String Str(){
            return next();
        }
    }


    public static void main (String[] args) throws java.lang.Exception {
        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        //reading /writing file
        //Scanner sc=new Scanner(new File("input.txt"));
        //PrintWriter pr=new PrintWriter("output.txt");

        int T=1;
        for(int t=0;t<T;t++){
            int n=Int();
            int A[][]=new int[n][2];
            for(int i=0;i<A.length;i++){
                A[i][0]=Int();
                A[i][1]=i;
            }


            int m=Int();
            int q[][]=new int[m][3];
            for(int i=0;i<m;i++){
                q[i][0]=Int();
                q[i][1]=Int();
                q[i][2]=Int();
            }
            Solution sol=new Solution(out);
            sol.solution(A,q);
        }
        out.close();

    }

    public static int[] Arr(int n){
        int A[]=new int[n];
        for(int i=0;i<n;i++)A[i]=Int();
        return A;
    }
    public static int Int(){
        return fs.Int();
    }
    public static long Long(){
        return fs.Long();
    }
    public static String Str(){
        return fs.Str();
    }

}








class Solution {
    PrintWriter out;
    int INF = Integer.MAX_VALUE;
    int MOD = 1000000007;

    public Solution(PrintWriter out) {
        this.out = out;
    }


    public void solution(int A[][], int q[][]) {
        int N = A.length;
        Arrays.sort(A, (a, b) -> {
            return b[0] - a[0];
        });


        TreeMap<Integer, Integer> tree = new TreeMap<>();
        PersistentSeg segs[] = new PersistentSeg[N + 1];
        segs[0] = new PersistentSeg(0, N - 1, true);


        for (int i = 0; i < A.length; i++) {
            int index = A[i][1];
            segs[i + 1] = new PersistentSeg(0, N - 1);
            PersistentSeg.update(segs[i], segs[i + 1], index, 1);
            tree.put(A[i][0], i + 1);
        }


        for (int p[] : q) {
            int l = 0, r = A[0][0];
            int res = -1;
            while (l <= r) {
                int mid = l + (r - l) / 2;
                Integer vkey = tree.ceilingKey(mid);
                int version = tree.get(vkey);
                int cnt = segs[version].query(p[0] - 1, p[1] - 1);
                //System.out.println(mid+" "+version+" "+cnt);
                if (cnt >= p[2]) {
                    res = mid;
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
            out.println(res);
        }
    }
}


class PersistentSeg{
    int l,r;
    int max = 0;
    PersistentSeg left=null,right=null;
    int post=0;int pre=0;
    TreeMap<Integer,Integer>tree=new TreeMap<>();
    public PersistentSeg(int l,int r,boolean init){
        this.l=l;
        this.r=r;
        if(l!=r){
            int mid=l+(r-l)/2;
            if(l<=mid)left=new PersistentSeg(l,mid,true);
            if(r>=mid+1)right=new PersistentSeg(mid+1,r,true);
        }else{
            this.max=0;
        }
    }
    public PersistentSeg(int l,int r){
        this.l=l;
        this.r=r;
    }


    public int query(int s,int e){

        if(e<0||s<0)return 0;
        if(l==s&&r==e){
            return max;
        }
        int mid=l+(r-l)/2; //left :  to mid-1,
        if(e<=mid){
            return left.query(s,e);
        }
        else if(s>=mid+1){
            return right.query(s,e);
        }
        else{
            int mx = Math.max(left.query(s,mid),right.query(mid+1,e));
            mx=Math.max(mx,Math.min(left.post,mid-s+1)+Math.min(right.pre,e-(mid+1)+1));
            return mx;
        }
    }

    public int len(){
        return this.r-this.l+1;
    }

    public static void update(PersistentSeg pre, PersistentSeg cur, int index, int val) {
        if (cur.l == cur.r) {
            cur.max = 1;
            cur.pre=1;
            cur.post=1;
            return;
        }

        int mid = cur.l + (cur.r - cur.l) / 2;
        if (index <= mid) {//update left
            cur.right = pre.right;
            cur.left = new PersistentSeg(pre.left.l, pre.left.r);
            cur.left.pre=pre.left.pre;cur.left.post=pre.left.post;

            update(pre.left, cur.left, index, val);
            cur.pre=cur.left.pre;cur.post=cur.right.post;

            if(cur.right.pre==cur.right.len()){
                cur.post=cur.right.pre+cur.left.post;
            }
            if(cur.left.pre==cur.left.len()){
                cur.pre=cur.left.pre+cur.right.pre;
            }


        } else {//update right
            cur.left = pre.left;
            cur.right = new PersistentSeg(pre.right.l, pre.right.r);
            cur.right.pre=pre.right.pre;cur.right.post=pre.right.post;

            update(pre.right, cur.right, index, val);
            cur.pre=cur.left.pre;cur.post=cur.right.post;

            if(cur.right.pre==cur.right.len()){
                cur.post=cur.right.pre+cur.left.post;
            }
            if(cur.left.pre==cur.left.len()){
                cur.pre=cur.left.pre+cur.right.pre;
            }
        }

        cur.max = Math.max(cur.left.max, cur.right.max);
        cur.max=Math.max(cur.max,Math.min(cur.left.post+cur.right.pre,cur.len()));
    }


}















